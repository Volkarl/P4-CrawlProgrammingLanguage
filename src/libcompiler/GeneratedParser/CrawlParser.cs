//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\Data\Documents\Visual Studio 2015\Projects\Crawl\src\libcompiler\Crawl.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace libcompiler.Parser {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class CrawlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, ADDITIVE_SYMBOL=5, MULTIPLICATIVE_SYMBOL=6, 
		MINUS=7, POINT_REAL=8, EXPONENT_REAL=9, STRING_LITERAL=10, TRUE=11, FALSE=12, 
		PUBLIC=13, PRIVATE=14, PROTECTED=15, PROTECTED_INTERNAL=16, INTERNAL=17, 
		CLASS=18, RETURN=19, IF=20, ELSE=21, WHILE=22, FOR=23, TO=24, AND=25, 
		OR=26, IMPORT=27, REFERENCE=28, FOR_LOOP_SEPERATOR=29, ITEM_SEPARATOR=30, 
		ASSIGNMENT_SYMBOL=31, END_OF_STATEMENT=32, LPARENTHESIS=33, RPARENTHESIS=34, 
		LSQUAREBRACKET=35, RSQUAREBRACKET=36, LANGLEBRACKET=37, RANGLEBRACKET=38, 
		INVERT=39, DOT=40, EXPONENT=41, INHERITANCE_OPERATOR=42, COMMENT=43, WS=44, 
		NUMBER=45, IDENTIFIER=46, NEWLINE=47, INDENT=48, DEDENT=49;
	public const int
		RULE_translation_unit = 0, RULE_import_directives = 1, RULE_import_directive = 2, 
		RULE_statements = 3, RULE_side_effect_stmt = 4, RULE_if_selection = 5, 
		RULE_for_loop = 6, RULE_while_loop = 7, RULE_return_statement = 8, RULE_declaration = 9, 
		RULE_function_decleration = 10, RULE_parameters = 11, RULE_parameter = 12, 
		RULE_generic_parameters = 13, RULE_generic = 14, RULE_variable_declerations = 15, 
		RULE_variable_decl = 16, RULE_function_body = 17, RULE_class_declaration = 18, 
		RULE_inheritances = 19, RULE_inheritance = 20, RULE_class_body = 21, RULE_assignment = 22, 
		RULE_type = 23, RULE_array_type = 24, RULE_function_type = 25, RULE_function_arguments = 26, 
		RULE_protection_level = 27, RULE_ref_expression_list = 28, RULE_expression_list = 29, 
		RULE_expression = 30, RULE_range_expression = 31, RULE_or_expression = 32, 
		RULE_and_expression = 33, RULE_comparison_expression = 34, RULE_additive_expression = 35, 
		RULE_multiplicative_expression = 36, RULE_exponential_expression = 37, 
		RULE_cast_expression = 38, RULE_unary_expression = 39, RULE_postfix_expression = 40, 
		RULE_call_expression = 41, RULE_subfield_expression = 42, RULE_index_expression = 43, 
		RULE_generic_unpack_expression = 44, RULE_atom = 45, RULE_comparison_symbol = 46, 
		RULE_unary_symbol = 47, RULE_literal = 48, RULE_boolean_literal = 49, 
		RULE_integer_literal = 50, RULE_real_literal = 51, RULE_string_literal = 52;
	public static readonly string[] ruleNames = {
		"translation_unit", "import_directives", "import_directive", "statements", 
		"side_effect_stmt", "if_selection", "for_loop", "while_loop", "return_statement", 
		"declaration", "function_decleration", "parameters", "parameter", "generic_parameters", 
		"generic", "variable_declerations", "variable_decl", "function_body", 
		"class_declaration", "inheritances", "inheritance", "class_body", "assignment", 
		"type", "array_type", "function_type", "function_arguments", "protection_level", 
		"ref_expression_list", "expression_list", "expression", "range_expression", 
		"or_expression", "and_expression", "comparison_expression", "additive_expression", 
		"multiplicative_expression", "exponential_expression", "cast_expression", 
		"unary_expression", "postfix_expression", "call_expression", "subfield_expression", 
		"index_expression", "generic_unpack_expression", "atom", "comparison_symbol", 
		"unary_symbol", "literal", "boolean_literal", "integer_literal", "real_literal", 
		"string_literal"
	};

	private static readonly string[] _LiteralNames = {
		null, "'>='", "'=='", "'!='", "'<='", null, null, "'-'", null, null, null, 
		"'sandt'", "'falsk'", null, "'privat'", "'beskyttet'", "'beskyttet intern'", 
		"'intern'", "'klasse'", "'returner'", "'hvis'", "'ellers'", "'mens'", 
		"'for'", "'til'", "'og'", "'eller'", "'importer'", "'reference'", "'fra'", 
		"','", "'='", "';'", "'('", "')'", "'['", "']'", "'<'", "'>'", "'ikke'", 
		"'.'", "'**'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "ADDITIVE_SYMBOL", "MULTIPLICATIVE_SYMBOL", 
		"MINUS", "POINT_REAL", "EXPONENT_REAL", "STRING_LITERAL", "TRUE", "FALSE", 
		"PUBLIC", "PRIVATE", "PROTECTED", "PROTECTED_INTERNAL", "INTERNAL", "CLASS", 
		"RETURN", "IF", "ELSE", "WHILE", "FOR", "TO", "AND", "OR", "IMPORT", "REFERENCE", 
		"FOR_LOOP_SEPERATOR", "ITEM_SEPARATOR", "ASSIGNMENT_SYMBOL", "END_OF_STATEMENT", 
		"LPARENTHESIS", "RPARENTHESIS", "LSQUAREBRACKET", "RSQUAREBRACKET", "LANGLEBRACKET", 
		"RANGLEBRACKET", "INVERT", "DOT", "EXPONENT", "INHERITANCE_OPERATOR", 
		"COMMENT", "WS", "NUMBER", "IDENTIFIER", "NEWLINE", "INDENT", "DEDENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Crawl.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static CrawlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public CrawlParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class Translation_unitContext : ParserRuleContext {
		public Import_directivesContext import_directives() {
			return GetRuleContext<Import_directivesContext>(0);
		}
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public Translation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translation_unit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterTranslation_unit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitTranslation_unit(this);
		}
	}

	[RuleVersion(0)]
	public Translation_unitContext translation_unit() {
		Translation_unitContext _localctx = new Translation_unitContext(Context, State);
		EnterRule(_localctx, 0, RULE_translation_unit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; import_directives();
			State = 107; statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_directivesContext : ParserRuleContext {
		public Import_directiveContext[] import_directive() {
			return GetRuleContexts<Import_directiveContext>();
		}
		public Import_directiveContext import_directive(int i) {
			return GetRuleContext<Import_directiveContext>(i);
		}
		public Import_directivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_directives; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterImport_directives(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitImport_directives(this);
		}
	}

	[RuleVersion(0)]
	public Import_directivesContext import_directives() {
		Import_directivesContext _localctx = new Import_directivesContext(Context, State);
		EnterRule(_localctx, 2, RULE_import_directives);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 109; import_directive();
				}
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_directiveContext : ParserRuleContext {
		public ITerminalNode IMPORT() { return GetToken(CrawlParser.IMPORT, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(CrawlParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CrawlParser.IDENTIFIER, i);
		}
		public ITerminalNode END_OF_STATEMENT() { return GetToken(CrawlParser.END_OF_STATEMENT, 0); }
		public ITerminalNode[] DOT() { return GetTokens(CrawlParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(CrawlParser.DOT, i);
		}
		public Import_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterImport_directive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitImport_directive(this);
		}
	}

	[RuleVersion(0)]
	public Import_directiveContext import_directive() {
		Import_directiveContext _localctx = new Import_directiveContext(Context, State);
		EnterRule(_localctx, 4, RULE_import_directive);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(IMPORT);
			State = 116; Match(IDENTIFIER);
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 117; Match(DOT);
				State = 118; Match(IDENTIFIER);
				}
				}
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 124; Match(END_OF_STATEMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		public If_selectionContext[] if_selection() {
			return GetRuleContexts<If_selectionContext>();
		}
		public If_selectionContext if_selection(int i) {
			return GetRuleContext<If_selectionContext>(i);
		}
		public For_loopContext[] for_loop() {
			return GetRuleContexts<For_loopContext>();
		}
		public For_loopContext for_loop(int i) {
			return GetRuleContext<For_loopContext>(i);
		}
		public While_loopContext[] while_loop() {
			return GetRuleContexts<While_loopContext>();
		}
		public While_loopContext while_loop(int i) {
			return GetRuleContext<While_loopContext>(i);
		}
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		public Return_statementContext[] return_statement() {
			return GetRuleContexts<Return_statementContext>();
		}
		public Return_statementContext return_statement(int i) {
			return GetRuleContext<Return_statementContext>(i);
		}
		public Side_effect_stmtContext[] side_effect_stmt() {
			return GetRuleContexts<Side_effect_stmtContext>();
		}
		public Side_effect_stmtContext side_effect_stmt(int i) {
			return GetRuleContext<Side_effect_stmtContext>(i);
		}
		public ITerminalNode[] END_OF_STATEMENT() { return GetTokens(CrawlParser.END_OF_STATEMENT); }
		public ITerminalNode END_OF_STATEMENT(int i) {
			return GetToken(CrawlParser.END_OF_STATEMENT, i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(CrawlParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(CrawlParser.NEWLINE, i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(Context, State);
		EnterRule(_localctx, 6, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << POINT_REAL) | (1L << EXPONENT_REAL) | (1L << STRING_LITERAL) | (1L << TRUE) | (1L << FALSE) | (1L << PUBLIC) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PROTECTED_INTERNAL) | (1L << INTERNAL) | (1L << CLASS) | (1L << RETURN) | (1L << IF) | (1L << WHILE) | (1L << FOR) | (1L << END_OF_STATEMENT) | (1L << LPARENTHESIS) | (1L << NUMBER) | (1L << IDENTIFIER) | (1L << NEWLINE))) != 0)) {
				{
				State = 135;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
				case 1:
					{
					State = 126; if_selection();
					}
					break;
				case 2:
					{
					State = 127; for_loop();
					}
					break;
				case 3:
					{
					State = 128; while_loop();
					}
					break;
				case 4:
					{
					State = 129; declaration();
					}
					break;
				case 5:
					{
					State = 130; assignment();
					}
					break;
				case 6:
					{
					State = 131; return_statement();
					}
					break;
				case 7:
					{
					State = 132; side_effect_stmt();
					}
					break;
				case 8:
					{
					State = 133; Match(END_OF_STATEMENT);
					}
					break;
				case 9:
					{
					State = 134; Match(NEWLINE);
					}
					break;
				}
				}
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Side_effect_stmtContext : ParserRuleContext {
		public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		public Call_expressionContext call_expression() {
			return GetRuleContext<Call_expressionContext>(0);
		}
		public ITerminalNode END_OF_STATEMENT() { return GetToken(CrawlParser.END_OF_STATEMENT, 0); }
		public Side_effect_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_side_effect_stmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterSide_effect_stmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitSide_effect_stmt(this);
		}
	}

	[RuleVersion(0)]
	public Side_effect_stmtContext side_effect_stmt() {
		Side_effect_stmtContext _localctx = new Side_effect_stmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_side_effect_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; postfix_expression();
			State = 141; call_expression();
			State = 142; Match(END_OF_STATEMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_selectionContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(CrawlParser.IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode[] INDENT() { return GetTokens(CrawlParser.INDENT); }
		public ITerminalNode INDENT(int i) {
			return GetToken(CrawlParser.INDENT, i);
		}
		public StatementsContext[] statements() {
			return GetRuleContexts<StatementsContext>();
		}
		public StatementsContext statements(int i) {
			return GetRuleContext<StatementsContext>(i);
		}
		public ITerminalNode[] DEDENT() { return GetTokens(CrawlParser.DEDENT); }
		public ITerminalNode DEDENT(int i) {
			return GetToken(CrawlParser.DEDENT, i);
		}
		public ITerminalNode ELSE() { return GetToken(CrawlParser.ELSE, 0); }
		public If_selectionContext if_selection() {
			return GetRuleContext<If_selectionContext>(0);
		}
		public If_selectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_selection; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterIf_selection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitIf_selection(this);
		}
	}

	[RuleVersion(0)]
	public If_selectionContext if_selection() {
		If_selectionContext _localctx = new If_selectionContext(Context, State);
		EnterRule(_localctx, 10, RULE_if_selection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(IF);
			State = 145; expression();
			State = 146; Match(INDENT);
			State = 147; statements();
			State = 148; Match(DEDENT);
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 149; Match(ELSE);
				State = 155;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INDENT:
					{
					{
					State = 150; Match(INDENT);
					State = 151; statements();
					State = 152; Match(DEDENT);
					}
					}
					break;
				case IF:
					{
					State = 154; if_selection();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_loopContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(CrawlParser.FOR, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(CrawlParser.IDENTIFIER, 0); }
		public ITerminalNode FOR_LOOP_SEPERATOR() { return GetToken(CrawlParser.FOR_LOOP_SEPERATOR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INDENT() { return GetToken(CrawlParser.INDENT, 0); }
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode DEDENT() { return GetToken(CrawlParser.DEDENT, 0); }
		public For_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_loop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterFor_loop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitFor_loop(this);
		}
	}

	[RuleVersion(0)]
	public For_loopContext for_loop() {
		For_loopContext _localctx = new For_loopContext(Context, State);
		EnterRule(_localctx, 12, RULE_for_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159; Match(FOR);
			State = 160; type();
			State = 161; Match(IDENTIFIER);
			State = 162; Match(FOR_LOOP_SEPERATOR);
			State = 163; expression();
			State = 164; Match(INDENT);
			State = 165; statements();
			State = 166; Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_loopContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(CrawlParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INDENT() { return GetToken(CrawlParser.INDENT, 0); }
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode DEDENT() { return GetToken(CrawlParser.DEDENT, 0); }
		public While_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_loop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterWhile_loop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitWhile_loop(this);
		}
	}

	[RuleVersion(0)]
	public While_loopContext while_loop() {
		While_loopContext _localctx = new While_loopContext(Context, State);
		EnterRule(_localctx, 14, RULE_while_loop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; Match(WHILE);
			State = 169; expression();
			State = 170; Match(INDENT);
			State = 171; statements();
			State = 172; Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(CrawlParser.RETURN, 0); }
		public ITerminalNode END_OF_STATEMENT() { return GetToken(CrawlParser.END_OF_STATEMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 16, RULE_return_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174; Match(RETURN);
			State = 176;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MINUS) | (1L << POINT_REAL) | (1L << EXPONENT_REAL) | (1L << STRING_LITERAL) | (1L << TRUE) | (1L << FALSE) | (1L << LPARENTHESIS) | (1L << INVERT) | (1L << NUMBER) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 175; expression();
				}
			}

			State = 178; Match(END_OF_STATEMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public Class_declarationContext class_declaration() {
			return GetRuleContext<Class_declarationContext>(0);
		}
		public Function_declerationContext function_decleration() {
			return GetRuleContext<Function_declerationContext>(0);
		}
		public Variable_declerationsContext variable_declerations() {
			return GetRuleContext<Variable_declerationsContext>(0);
		}
		public Protection_levelContext protection_level() {
			return GetRuleContext<Protection_levelContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PUBLIC) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PROTECTED_INTERNAL) | (1L << INTERNAL))) != 0)) {
				{
				State = 180; protection_level();
				}
			}

			State = 186;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 183; class_declaration();
				}
				break;
			case 2:
				{
				State = 184; function_decleration();
				}
				break;
			case 3:
				{
				State = 185; variable_declerations();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declerationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(CrawlParser.IDENTIFIER, 0); }
		public ITerminalNode ASSIGNMENT_SYMBOL() { return GetToken(CrawlParser.ASSIGNMENT_SYMBOL, 0); }
		public Function_bodyContext function_body() {
			return GetRuleContext<Function_bodyContext>(0);
		}
		public Generic_parametersContext generic_parameters() {
			return GetRuleContext<Generic_parametersContext>(0);
		}
		public Function_declerationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_decleration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterFunction_decleration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitFunction_decleration(this);
		}
	}

	[RuleVersion(0)]
	public Function_declerationContext function_decleration() {
		Function_declerationContext _localctx = new Function_declerationContext(Context, State);
		EnterRule(_localctx, 20, RULE_function_decleration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188; type();
			State = 189; parameters();
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LANGLEBRACKET) {
				{
				State = 190; generic_parameters();
				}
			}

			State = 193; Match(IDENTIFIER);
			State = 194; Match(ASSIGNMENT_SYMBOL);
			State = 195; function_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		public ITerminalNode LPARENTHESIS() { return GetToken(CrawlParser.LPARENTHESIS, 0); }
		public ITerminalNode RPARENTHESIS() { return GetToken(CrawlParser.RPARENTHESIS, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] ITEM_SEPARATOR() { return GetTokens(CrawlParser.ITEM_SEPARATOR); }
		public ITerminalNode ITEM_SEPARATOR(int i) {
			return GetToken(CrawlParser.ITEM_SEPARATOR, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitParameters(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 22, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; Match(LPARENTHESIS);
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REFERENCE || _la==IDENTIFIER) {
				{
				State = 198; parameter();
				State = 203;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ITEM_SEPARATOR) {
					{
					{
					State = 199; Match(ITEM_SEPARATOR);
					State = 200; parameter();
					}
					}
					State = 205;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 208; Match(RPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(CrawlParser.IDENTIFIER, 0); }
		public ITerminalNode REFERENCE() { return GetToken(CrawlParser.REFERENCE, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 24, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REFERENCE) {
				{
				State = 210; Match(REFERENCE);
				}
			}

			State = 213; type();
			State = 214; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_parametersContext : ParserRuleContext {
		public ITerminalNode LANGLEBRACKET() { return GetToken(CrawlParser.LANGLEBRACKET, 0); }
		public GenericContext[] generic() {
			return GetRuleContexts<GenericContext>();
		}
		public GenericContext generic(int i) {
			return GetRuleContext<GenericContext>(i);
		}
		public ITerminalNode RANGLEBRACKET() { return GetToken(CrawlParser.RANGLEBRACKET, 0); }
		public ITerminalNode[] ITEM_SEPARATOR() { return GetTokens(CrawlParser.ITEM_SEPARATOR); }
		public ITerminalNode ITEM_SEPARATOR(int i) {
			return GetToken(CrawlParser.ITEM_SEPARATOR, i);
		}
		public Generic_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterGeneric_parameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitGeneric_parameters(this);
		}
	}

	[RuleVersion(0)]
	public Generic_parametersContext generic_parameters() {
		Generic_parametersContext _localctx = new Generic_parametersContext(Context, State);
		EnterRule(_localctx, 26, RULE_generic_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; Match(LANGLEBRACKET);
			State = 217; generic();
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ITEM_SEPARATOR) {
				{
				{
				State = 218; Match(ITEM_SEPARATOR);
				State = 219; generic();
				}
				}
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 225; Match(RANGLEBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(CrawlParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CrawlParser.IDENTIFIER, i);
		}
		public ITerminalNode INHERITANCE_OPERATOR() { return GetToken(CrawlParser.INHERITANCE_OPERATOR, 0); }
		public GenericContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterGeneric(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitGeneric(this);
		}
	}

	[RuleVersion(0)]
	public GenericContext generic() {
		GenericContext _localctx = new GenericContext(Context, State);
		EnterRule(_localctx, 28, RULE_generic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227; Match(IDENTIFIER);
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITANCE_OPERATOR) {
				{
				State = 228; Match(INHERITANCE_OPERATOR);
				State = 229; Match(IDENTIFIER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declerationsContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Variable_declContext[] variable_decl() {
			return GetRuleContexts<Variable_declContext>();
		}
		public Variable_declContext variable_decl(int i) {
			return GetRuleContext<Variable_declContext>(i);
		}
		public ITerminalNode END_OF_STATEMENT() { return GetToken(CrawlParser.END_OF_STATEMENT, 0); }
		public ITerminalNode[] ITEM_SEPARATOR() { return GetTokens(CrawlParser.ITEM_SEPARATOR); }
		public ITerminalNode ITEM_SEPARATOR(int i) {
			return GetToken(CrawlParser.ITEM_SEPARATOR, i);
		}
		public Variable_declerationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declerations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterVariable_declerations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitVariable_declerations(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declerationsContext variable_declerations() {
		Variable_declerationsContext _localctx = new Variable_declerationsContext(Context, State);
		EnterRule(_localctx, 30, RULE_variable_declerations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232; type();
			State = 233; variable_decl();
			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ITEM_SEPARATOR) {
				{
				{
				State = 234; Match(ITEM_SEPARATOR);
				State = 235; variable_decl();
				}
				}
				State = 240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 241; Match(END_OF_STATEMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CrawlParser.IDENTIFIER, 0); }
		public ITerminalNode ASSIGNMENT_SYMBOL() { return GetToken(CrawlParser.ASSIGNMENT_SYMBOL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Variable_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterVariable_decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitVariable_decl(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declContext variable_decl() {
		Variable_declContext _localctx = new Variable_declContext(Context, State);
		EnterRule(_localctx, 32, RULE_variable_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; Match(IDENTIFIER);
			State = 246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT_SYMBOL) {
				{
				State = 244; Match(ASSIGNMENT_SYMBOL);
				State = 245; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_bodyContext : ParserRuleContext {
		public ITerminalNode INDENT() { return GetToken(CrawlParser.INDENT, 0); }
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode DEDENT() { return GetToken(CrawlParser.DEDENT, 0); }
		public Function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterFunction_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitFunction_body(this);
		}
	}

	[RuleVersion(0)]
	public Function_bodyContext function_body() {
		Function_bodyContext _localctx = new Function_bodyContext(Context, State);
		EnterRule(_localctx, 34, RULE_function_body);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; Match(INDENT);
			State = 249; statements();
			State = 250; Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_declarationContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(CrawlParser.CLASS, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(CrawlParser.IDENTIFIER, 0); }
		public ITerminalNode ASSIGNMENT_SYMBOL() { return GetToken(CrawlParser.ASSIGNMENT_SYMBOL, 0); }
		public Class_bodyContext class_body() {
			return GetRuleContext<Class_bodyContext>(0);
		}
		public ITerminalNode INHERITANCE_OPERATOR() { return GetToken(CrawlParser.INHERITANCE_OPERATOR, 0); }
		public InheritancesContext inheritances() {
			return GetRuleContext<InheritancesContext>(0);
		}
		public Generic_parametersContext generic_parameters() {
			return GetRuleContext<Generic_parametersContext>(0);
		}
		public Class_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterClass_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitClass_declaration(this);
		}
	}

	[RuleVersion(0)]
	public Class_declarationContext class_declaration() {
		Class_declarationContext _localctx = new Class_declarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_class_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252; Match(CLASS);
			State = 253; Match(IDENTIFIER);
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INHERITANCE_OPERATOR) {
				{
				State = 254; Match(INHERITANCE_OPERATOR);
				State = 255; inheritances();
				}
			}

			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LANGLEBRACKET) {
				{
				State = 258; generic_parameters();
				}
			}

			State = 261; Match(ASSIGNMENT_SYMBOL);
			State = 262; class_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritancesContext : ParserRuleContext {
		public InheritanceContext[] inheritance() {
			return GetRuleContexts<InheritanceContext>();
		}
		public InheritanceContext inheritance(int i) {
			return GetRuleContext<InheritanceContext>(i);
		}
		public ITerminalNode[] ITEM_SEPARATOR() { return GetTokens(CrawlParser.ITEM_SEPARATOR); }
		public ITerminalNode ITEM_SEPARATOR(int i) {
			return GetToken(CrawlParser.ITEM_SEPARATOR, i);
		}
		public InheritancesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritances; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterInheritances(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitInheritances(this);
		}
	}

	[RuleVersion(0)]
	public InheritancesContext inheritances() {
		InheritancesContext _localctx = new InheritancesContext(Context, State);
		EnterRule(_localctx, 38, RULE_inheritances);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264; inheritance();
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ITEM_SEPARATOR) {
				{
				{
				State = 265; Match(ITEM_SEPARATOR);
				State = 266; inheritance();
				}
				}
				State = 271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritanceContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CrawlParser.IDENTIFIER, 0); }
		public InheritanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritance; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterInheritance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitInheritance(this);
		}
	}

	[RuleVersion(0)]
	public InheritanceContext inheritance() {
		InheritanceContext _localctx = new InheritanceContext(Context, State);
		EnterRule(_localctx, 40, RULE_inheritance);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_bodyContext : ParserRuleContext {
		public ITerminalNode INDENT() { return GetToken(CrawlParser.INDENT, 0); }
		public ITerminalNode DEDENT() { return GetToken(CrawlParser.DEDENT, 0); }
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public Class_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterClass_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitClass_body(this);
		}
	}

	[RuleVersion(0)]
	public Class_bodyContext class_body() {
		Class_bodyContext _localctx = new Class_bodyContext(Context, State);
		EnterRule(_localctx, 42, RULE_class_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; Match(INDENT);
			State = 278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PUBLIC) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PROTECTED_INTERNAL) | (1L << INTERNAL) | (1L << CLASS) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 275; declaration();
				}
				}
				State = 280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 281; Match(DEDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode ASSIGNMENT_SYMBOL() { return GetToken(CrawlParser.ASSIGNMENT_SYMBOL, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode END_OF_STATEMENT() { return GetToken(CrawlParser.END_OF_STATEMENT, 0); }
		public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public Subfield_expressionContext subfield_expression() {
			return GetRuleContext<Subfield_expressionContext>(0);
		}
		public Index_expressionContext index_expression() {
			return GetRuleContext<Index_expressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 44, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 283; postfix_expression();
				State = 286;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOT:
					{
					State = 284; subfield_expression();
					}
					break;
				case LSQUAREBRACKET:
					{
					State = 285; index_expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				State = 288; atom();
				}
				break;
			}
			State = 291; Match(ASSIGNMENT_SYMBOL);
			State = 292; expression();
			State = 293; Match(END_OF_STATEMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CrawlParser.IDENTIFIER, 0); }
		public Function_typeContext function_type() {
			return GetRuleContext<Function_typeContext>(0);
		}
		public Array_typeContext array_type() {
			return GetRuleContext<Array_typeContext>(0);
		}
		public Generic_unpack_expressionContext generic_unpack_expression() {
			return GetRuleContext<Generic_unpack_expressionContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 46, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295; Match(IDENTIFIER);
			State = 297;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 296; function_type();
				}
				break;
			}
			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LSQUAREBRACKET) {
				{
				State = 299; array_type();
				}
			}

			State = 303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LANGLEBRACKET) {
				{
				State = 302; generic_unpack_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_typeContext : ParserRuleContext {
		public ITerminalNode[] LSQUAREBRACKET() { return GetTokens(CrawlParser.LSQUAREBRACKET); }
		public ITerminalNode LSQUAREBRACKET(int i) {
			return GetToken(CrawlParser.LSQUAREBRACKET, i);
		}
		public ITerminalNode[] RSQUAREBRACKET() { return GetTokens(CrawlParser.RSQUAREBRACKET); }
		public ITerminalNode RSQUAREBRACKET(int i) {
			return GetToken(CrawlParser.RSQUAREBRACKET, i);
		}
		public ITerminalNode[] ITEM_SEPARATOR() { return GetTokens(CrawlParser.ITEM_SEPARATOR); }
		public ITerminalNode ITEM_SEPARATOR(int i) {
			return GetToken(CrawlParser.ITEM_SEPARATOR, i);
		}
		public Array_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterArray_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitArray_type(this);
		}
	}

	[RuleVersion(0)]
	public Array_typeContext array_type() {
		Array_typeContext _localctx = new Array_typeContext(Context, State);
		EnterRule(_localctx, 48, RULE_array_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 305; Match(LSQUAREBRACKET);
				State = 309;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ITEM_SEPARATOR) {
					{
					{
					State = 306; Match(ITEM_SEPARATOR);
					}
					}
					State = 311;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 312; Match(RSQUAREBRACKET);
				}
				}
				State = 315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LSQUAREBRACKET );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_typeContext : ParserRuleContext {
		public ITerminalNode[] LPARENTHESIS() { return GetTokens(CrawlParser.LPARENTHESIS); }
		public ITerminalNode LPARENTHESIS(int i) {
			return GetToken(CrawlParser.LPARENTHESIS, i);
		}
		public ITerminalNode[] RPARENTHESIS() { return GetTokens(CrawlParser.RPARENTHESIS); }
		public ITerminalNode RPARENTHESIS(int i) {
			return GetToken(CrawlParser.RPARENTHESIS, i);
		}
		public Function_argumentsContext[] function_arguments() {
			return GetRuleContexts<Function_argumentsContext>();
		}
		public Function_argumentsContext function_arguments(int i) {
			return GetRuleContext<Function_argumentsContext>(i);
		}
		public Function_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterFunction_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitFunction_type(this);
		}
	}

	[RuleVersion(0)]
	public Function_typeContext function_type() {
		Function_typeContext _localctx = new Function_typeContext(Context, State);
		EnterRule(_localctx, 50, RULE_function_type);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 317; Match(LPARENTHESIS);
					State = 319;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==REFERENCE || _la==IDENTIFIER) {
						{
						State = 318; function_arguments();
						}
					}

					State = 321; Match(RPARENTHESIS);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 324;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_argumentsContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode[] ITEM_SEPARATOR() { return GetTokens(CrawlParser.ITEM_SEPARATOR); }
		public ITerminalNode ITEM_SEPARATOR(int i) {
			return GetToken(CrawlParser.ITEM_SEPARATOR, i);
		}
		public ITerminalNode[] REFERENCE() { return GetTokens(CrawlParser.REFERENCE); }
		public ITerminalNode REFERENCE(int i) {
			return GetToken(CrawlParser.REFERENCE, i);
		}
		public ITerminalNode[] IDENTIFIER() { return GetTokens(CrawlParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(CrawlParser.IDENTIFIER, i);
		}
		public Function_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterFunction_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitFunction_arguments(this);
		}
	}

	[RuleVersion(0)]
	public Function_argumentsContext function_arguments() {
		Function_argumentsContext _localctx = new Function_argumentsContext(Context, State);
		EnterRule(_localctx, 52, RULE_function_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REFERENCE) {
				{
				State = 326; Match(REFERENCE);
				}
			}

			State = 329; type();
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 330; Match(IDENTIFIER);
				}
			}

			}
			State = 343;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ITEM_SEPARATOR) {
				{
				{
				State = 333; Match(ITEM_SEPARATOR);
				State = 335;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REFERENCE) {
					{
					State = 334; Match(REFERENCE);
					}
				}

				State = 337; type();
				State = 339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 338; Match(IDENTIFIER);
					}
				}

				}
				}
				State = 345;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Protection_levelContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(CrawlParser.PUBLIC, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CrawlParser.PRIVATE, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CrawlParser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CrawlParser.INTERNAL, 0); }
		public ITerminalNode PROTECTED_INTERNAL() { return GetToken(CrawlParser.PROTECTED_INTERNAL, 0); }
		public Protection_levelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_protection_level; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterProtection_level(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitProtection_level(this);
		}
	}

	[RuleVersion(0)]
	public Protection_levelContext protection_level() {
		Protection_levelContext _localctx = new Protection_levelContext(Context, State);
		EnterRule(_localctx, 54, RULE_protection_level);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PUBLIC) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PROTECTED_INTERNAL) | (1L << INTERNAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ref_expression_listContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] REFERENCE() { return GetTokens(CrawlParser.REFERENCE); }
		public ITerminalNode REFERENCE(int i) {
			return GetToken(CrawlParser.REFERENCE, i);
		}
		public ITerminalNode[] ITEM_SEPARATOR() { return GetTokens(CrawlParser.ITEM_SEPARATOR); }
		public ITerminalNode ITEM_SEPARATOR(int i) {
			return GetToken(CrawlParser.ITEM_SEPARATOR, i);
		}
		public Ref_expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ref_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterRef_expression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitRef_expression_list(this);
		}
	}

	[RuleVersion(0)]
	public Ref_expression_listContext ref_expression_list() {
		Ref_expression_listContext _localctx = new Ref_expression_listContext(Context, State);
		EnterRule(_localctx, 56, RULE_ref_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REFERENCE) {
				{
				State = 348; Match(REFERENCE);
				}
			}

			State = 351; expression();
			State = 359;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ITEM_SEPARATOR) {
				{
				{
				State = 352; Match(ITEM_SEPARATOR);
				State = 354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REFERENCE) {
					{
					State = 353; Match(REFERENCE);
					}
				}

				State = 356; expression();
				}
				}
				State = 361;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] ITEM_SEPARATOR() { return GetTokens(CrawlParser.ITEM_SEPARATOR); }
		public ITerminalNode ITEM_SEPARATOR(int i) {
			return GetToken(CrawlParser.ITEM_SEPARATOR, i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 58, RULE_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362; expression();
			State = 367;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ITEM_SEPARATOR) {
				{
				{
				State = 363; Match(ITEM_SEPARATOR);
				State = 364; expression();
				}
				}
				State = 369;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Range_expressionContext range_expression() {
			return GetRuleContext<Range_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370; range_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Range_expressionContext : ParserRuleContext {
		public Or_expressionContext[] or_expression() {
			return GetRuleContexts<Or_expressionContext>();
		}
		public Or_expressionContext or_expression(int i) {
			return GetRuleContext<Or_expressionContext>(i);
		}
		public ITerminalNode TO() { return GetToken(CrawlParser.TO, 0); }
		public Range_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterRange_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitRange_expression(this);
		}
	}

	[RuleVersion(0)]
	public Range_expressionContext range_expression() {
		Range_expressionContext _localctx = new Range_expressionContext(Context, State);
		EnterRule(_localctx, 62, RULE_range_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372; or_expression();
			State = 375;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TO) {
				{
				State = 373; Match(TO);
				State = 374; or_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Or_expressionContext : ParserRuleContext {
		public And_expressionContext[] and_expression() {
			return GetRuleContexts<And_expressionContext>();
		}
		public And_expressionContext and_expression(int i) {
			return GetRuleContext<And_expressionContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(CrawlParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(CrawlParser.OR, i);
		}
		public Or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterOr_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitOr_expression(this);
		}
	}

	[RuleVersion(0)]
	public Or_expressionContext or_expression() {
		Or_expressionContext _localctx = new Or_expressionContext(Context, State);
		EnterRule(_localctx, 64, RULE_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377; and_expression();
			State = 382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 378; Match(OR);
				State = 379; and_expression();
				}
				}
				State = 384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_expressionContext : ParserRuleContext {
		public Comparison_expressionContext[] comparison_expression() {
			return GetRuleContexts<Comparison_expressionContext>();
		}
		public Comparison_expressionContext comparison_expression(int i) {
			return GetRuleContext<Comparison_expressionContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(CrawlParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(CrawlParser.AND, i);
		}
		public And_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterAnd_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitAnd_expression(this);
		}
	}

	[RuleVersion(0)]
	public And_expressionContext and_expression() {
		And_expressionContext _localctx = new And_expressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_and_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 385; comparison_expression();
			State = 390;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 386; Match(AND);
				State = 387; comparison_expression();
				}
				}
				State = 392;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_expressionContext : ParserRuleContext {
		public Additive_expressionContext[] additive_expression() {
			return GetRuleContexts<Additive_expressionContext>();
		}
		public Additive_expressionContext additive_expression(int i) {
			return GetRuleContext<Additive_expressionContext>(i);
		}
		public Comparison_symbolContext comparison_symbol() {
			return GetRuleContext<Comparison_symbolContext>(0);
		}
		public Comparison_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterComparison_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitComparison_expression(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_expressionContext comparison_expression() {
		Comparison_expressionContext _localctx = new Comparison_expressionContext(Context, State);
		EnterRule(_localctx, 68, RULE_comparison_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393; additive_expression();
			State = 397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << LANGLEBRACKET) | (1L << RANGLEBRACKET))) != 0)) {
				{
				State = 394; comparison_symbol();
				State = 395; additive_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Additive_expressionContext : ParserRuleContext {
		public Multiplicative_expressionContext[] multiplicative_expression() {
			return GetRuleContexts<Multiplicative_expressionContext>();
		}
		public Multiplicative_expressionContext multiplicative_expression(int i) {
			return GetRuleContext<Multiplicative_expressionContext>(i);
		}
		public ITerminalNode[] ADDITIVE_SYMBOL() { return GetTokens(CrawlParser.ADDITIVE_SYMBOL); }
		public ITerminalNode ADDITIVE_SYMBOL(int i) {
			return GetToken(CrawlParser.ADDITIVE_SYMBOL, i);
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterAdditive_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitAdditive_expression(this);
		}
	}

	[RuleVersion(0)]
	public Additive_expressionContext additive_expression() {
		Additive_expressionContext _localctx = new Additive_expressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_additive_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399; multiplicative_expression();
			State = 404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ADDITIVE_SYMBOL) {
				{
				{
				State = 400; Match(ADDITIVE_SYMBOL);
				State = 401; multiplicative_expression();
				}
				}
				State = 406;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplicative_expressionContext : ParserRuleContext {
		public Exponential_expressionContext[] exponential_expression() {
			return GetRuleContexts<Exponential_expressionContext>();
		}
		public Exponential_expressionContext exponential_expression(int i) {
			return GetRuleContext<Exponential_expressionContext>(i);
		}
		public ITerminalNode[] MULTIPLICATIVE_SYMBOL() { return GetTokens(CrawlParser.MULTIPLICATIVE_SYMBOL); }
		public ITerminalNode MULTIPLICATIVE_SYMBOL(int i) {
			return GetToken(CrawlParser.MULTIPLICATIVE_SYMBOL, i);
		}
		public Multiplicative_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterMultiplicative_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitMultiplicative_expression(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_expressionContext multiplicative_expression() {
		Multiplicative_expressionContext _localctx = new Multiplicative_expressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_multiplicative_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407; exponential_expression();
			State = 412;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MULTIPLICATIVE_SYMBOL) {
				{
				{
				State = 408; Match(MULTIPLICATIVE_SYMBOL);
				State = 409; exponential_expression();
				}
				}
				State = 414;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exponential_expressionContext : ParserRuleContext {
		public Cast_expressionContext[] cast_expression() {
			return GetRuleContexts<Cast_expressionContext>();
		}
		public Cast_expressionContext cast_expression(int i) {
			return GetRuleContext<Cast_expressionContext>(i);
		}
		public ITerminalNode[] EXPONENT() { return GetTokens(CrawlParser.EXPONENT); }
		public ITerminalNode EXPONENT(int i) {
			return GetToken(CrawlParser.EXPONENT, i);
		}
		public Exponential_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exponential_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterExponential_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitExponential_expression(this);
		}
	}

	[RuleVersion(0)]
	public Exponential_expressionContext exponential_expression() {
		Exponential_expressionContext _localctx = new Exponential_expressionContext(Context, State);
		EnterRule(_localctx, 74, RULE_exponential_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 415; cast_expression();
			State = 420;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==EXPONENT) {
				{
				{
				State = 416; Match(EXPONENT);
				State = 417; cast_expression();
				}
				}
				State = 422;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_expressionContext : ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public ITerminalNode[] LPARENTHESIS() { return GetTokens(CrawlParser.LPARENTHESIS); }
		public ITerminalNode LPARENTHESIS(int i) {
			return GetToken(CrawlParser.LPARENTHESIS, i);
		}
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode[] RPARENTHESIS() { return GetTokens(CrawlParser.RPARENTHESIS); }
		public ITerminalNode RPARENTHESIS(int i) {
			return GetToken(CrawlParser.RPARENTHESIS, i);
		}
		public Cast_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterCast_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitCast_expression(this);
		}
	}

	[RuleVersion(0)]
	public Cast_expressionContext cast_expression() {
		Cast_expressionContext _localctx = new Cast_expressionContext(Context, State);
		EnterRule(_localctx, 76, RULE_cast_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 429;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 423; Match(LPARENTHESIS);
					State = 424; type();
					State = 425; Match(RPARENTHESIS);
					}
					} 
				}
				State = 431;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			State = 432; unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		public Unary_symbolContext[] unary_symbol() {
			return GetRuleContexts<Unary_symbolContext>();
		}
		public Unary_symbolContext unary_symbol(int i) {
			return GetRuleContext<Unary_symbolContext>(i);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 78, RULE_unary_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MINUS || _la==INVERT) {
				{
				{
				State = 434; unary_symbol();
				}
				}
				State = 439;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 440; postfix_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_expressionContext : ParserRuleContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public Call_expressionContext[] call_expression() {
			return GetRuleContexts<Call_expressionContext>();
		}
		public Call_expressionContext call_expression(int i) {
			return GetRuleContext<Call_expressionContext>(i);
		}
		public Subfield_expressionContext[] subfield_expression() {
			return GetRuleContexts<Subfield_expressionContext>();
		}
		public Subfield_expressionContext subfield_expression(int i) {
			return GetRuleContext<Subfield_expressionContext>(i);
		}
		public Index_expressionContext[] index_expression() {
			return GetRuleContexts<Index_expressionContext>();
		}
		public Index_expressionContext index_expression(int i) {
			return GetRuleContext<Index_expressionContext>(i);
		}
		public Generic_unpack_expressionContext[] generic_unpack_expression() {
			return GetRuleContexts<Generic_unpack_expressionContext>();
		}
		public Generic_unpack_expressionContext generic_unpack_expression(int i) {
			return GetRuleContext<Generic_unpack_expressionContext>(i);
		}
		public Postfix_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterPostfix_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitPostfix_expression(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_expressionContext postfix_expression() {
		Postfix_expressionContext _localctx = new Postfix_expressionContext(Context, State);
		EnterRule(_localctx, 80, RULE_postfix_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 442; atom();
			State = 449;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 447;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case LPARENTHESIS:
						{
						State = 443; call_expression();
						}
						break;
					case DOT:
						{
						State = 444; subfield_expression();
						}
						break;
					case LSQUAREBRACKET:
						{
						State = 445; index_expression();
						}
						break;
					case LANGLEBRACKET:
						{
						State = 446; generic_unpack_expression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 451;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Call_expressionContext : ParserRuleContext {
		public ITerminalNode LPARENTHESIS() { return GetToken(CrawlParser.LPARENTHESIS, 0); }
		public ITerminalNode RPARENTHESIS() { return GetToken(CrawlParser.RPARENTHESIS, 0); }
		public Ref_expression_listContext ref_expression_list() {
			return GetRuleContext<Ref_expression_listContext>(0);
		}
		public Call_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterCall_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitCall_expression(this);
		}
	}

	[RuleVersion(0)]
	public Call_expressionContext call_expression() {
		Call_expressionContext _localctx = new Call_expressionContext(Context, State);
		EnterRule(_localctx, 82, RULE_call_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 452; Match(LPARENTHESIS);
			State = 454;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MINUS) | (1L << POINT_REAL) | (1L << EXPONENT_REAL) | (1L << STRING_LITERAL) | (1L << TRUE) | (1L << FALSE) | (1L << REFERENCE) | (1L << LPARENTHESIS) | (1L << INVERT) | (1L << NUMBER) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 453; ref_expression_list();
				}
			}

			State = 456; Match(RPARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Subfield_expressionContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(CrawlParser.DOT, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(CrawlParser.IDENTIFIER, 0); }
		public Subfield_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subfield_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterSubfield_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitSubfield_expression(this);
		}
	}

	[RuleVersion(0)]
	public Subfield_expressionContext subfield_expression() {
		Subfield_expressionContext _localctx = new Subfield_expressionContext(Context, State);
		EnterRule(_localctx, 84, RULE_subfield_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458; Match(DOT);
			State = 459; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Index_expressionContext : ParserRuleContext {
		public ITerminalNode LSQUAREBRACKET() { return GetToken(CrawlParser.LSQUAREBRACKET, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode RSQUAREBRACKET() { return GetToken(CrawlParser.RSQUAREBRACKET, 0); }
		public Index_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterIndex_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitIndex_expression(this);
		}
	}

	[RuleVersion(0)]
	public Index_expressionContext index_expression() {
		Index_expressionContext _localctx = new Index_expressionContext(Context, State);
		EnterRule(_localctx, 86, RULE_index_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 461; Match(LSQUAREBRACKET);
			State = 462; expression_list();
			State = 463; Match(RSQUAREBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_unpack_expressionContext : ParserRuleContext {
		public ITerminalNode LANGLEBRACKET() { return GetToken(CrawlParser.LANGLEBRACKET, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode RANGLEBRACKET() { return GetToken(CrawlParser.RANGLEBRACKET, 0); }
		public ITerminalNode[] ITEM_SEPARATOR() { return GetTokens(CrawlParser.ITEM_SEPARATOR); }
		public ITerminalNode ITEM_SEPARATOR(int i) {
			return GetToken(CrawlParser.ITEM_SEPARATOR, i);
		}
		public Generic_unpack_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_unpack_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterGeneric_unpack_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitGeneric_unpack_expression(this);
		}
	}

	[RuleVersion(0)]
	public Generic_unpack_expressionContext generic_unpack_expression() {
		Generic_unpack_expressionContext _localctx = new Generic_unpack_expressionContext(Context, State);
		EnterRule(_localctx, 88, RULE_generic_unpack_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465; Match(LANGLEBRACKET);
			State = 466; type();
			State = 471;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ITEM_SEPARATOR) {
				{
				{
				State = 467; Match(ITEM_SEPARATOR);
				State = 468; type();
				}
				}
				State = 473;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 474; Match(RANGLEBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CrawlParser.IDENTIFIER, 0); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode LPARENTHESIS() { return GetToken(CrawlParser.LPARENTHESIS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPARENTHESIS() { return GetToken(CrawlParser.RPARENTHESIS, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitAtom(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 90, RULE_atom);
		try {
			State = 482;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 476; Match(IDENTIFIER);
				}
				break;
			case POINT_REAL:
			case EXPONENT_REAL:
			case STRING_LITERAL:
			case TRUE:
			case FALSE:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 477; literal();
				}
				break;
			case LPARENTHESIS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 478; Match(LPARENTHESIS);
				State = 479; expression();
				State = 480; Match(RPARENTHESIS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_symbolContext : ParserRuleContext {
		public ITerminalNode RANGLEBRACKET() { return GetToken(CrawlParser.RANGLEBRACKET, 0); }
		public ITerminalNode LANGLEBRACKET() { return GetToken(CrawlParser.LANGLEBRACKET, 0); }
		public Comparison_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_symbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterComparison_symbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitComparison_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_symbolContext comparison_symbol() {
		Comparison_symbolContext _localctx = new Comparison_symbolContext(Context, State);
		EnterRule(_localctx, 92, RULE_comparison_symbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 484;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << LANGLEBRACKET) | (1L << RANGLEBRACKET))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_symbolContext : ParserRuleContext {
		public ITerminalNode INVERT() { return GetToken(CrawlParser.INVERT, 0); }
		public ITerminalNode MINUS() { return GetToken(CrawlParser.MINUS, 0); }
		public Unary_symbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_symbol; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterUnary_symbol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitUnary_symbol(this);
		}
	}

	[RuleVersion(0)]
	public Unary_symbolContext unary_symbol() {
		Unary_symbolContext _localctx = new Unary_symbolContext(Context, State);
		EnterRule(_localctx, 94, RULE_unary_symbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			_la = TokenStream.LA(1);
			if ( !(_la==MINUS || _la==INVERT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public Boolean_literalContext boolean_literal() {
			return GetRuleContext<Boolean_literalContext>(0);
		}
		public Integer_literalContext integer_literal() {
			return GetRuleContext<Integer_literalContext>(0);
		}
		public Real_literalContext real_literal() {
			return GetRuleContext<Real_literalContext>(0);
		}
		public String_literalContext string_literal() {
			return GetRuleContext<String_literalContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 96, RULE_literal);
		try {
			State = 492;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 488; boolean_literal();
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 489; integer_literal();
				}
				break;
			case POINT_REAL:
			case EXPONENT_REAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 490; real_literal();
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 491; string_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_literalContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(CrawlParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(CrawlParser.FALSE, 0); }
		public Boolean_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterBoolean_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitBoolean_literal(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_literalContext boolean_literal() {
		Boolean_literalContext _localctx = new Boolean_literalContext(Context, State);
		EnterRule(_localctx, 98, RULE_boolean_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integer_literalContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(CrawlParser.NUMBER, 0); }
		public Integer_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterInteger_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitInteger_literal(this);
		}
	}

	[RuleVersion(0)]
	public Integer_literalContext integer_literal() {
		Integer_literalContext _localctx = new Integer_literalContext(Context, State);
		EnterRule(_localctx, 100, RULE_integer_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 496; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Real_literalContext : ParserRuleContext {
		public ITerminalNode POINT_REAL() { return GetToken(CrawlParser.POINT_REAL, 0); }
		public ITerminalNode EXPONENT_REAL() { return GetToken(CrawlParser.EXPONENT_REAL, 0); }
		public Real_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_real_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterReal_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitReal_literal(this);
		}
	}

	[RuleVersion(0)]
	public Real_literalContext real_literal() {
		Real_literalContext _localctx = new Real_literalContext(Context, State);
		EnterRule(_localctx, 102, RULE_real_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			_la = TokenStream.LA(1);
			if ( !(_la==POINT_REAL || _la==EXPONENT_REAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_literalContext : ParserRuleContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(CrawlParser.STRING_LITERAL, 0); }
		public String_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.EnterString_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICrawlListener typedListener = listener as ICrawlListener;
			if (typedListener != null) typedListener.ExitString_literal(this);
		}
	}

	[RuleVersion(0)]
	public String_literalContext string_literal() {
		String_literalContext _localctx = new String_literalContext(Context, State);
		EnterRule(_localctx, 104, RULE_string_literal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500; Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x33");
		sb.Append("\x1F9\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t ");
		sb.Append("\x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t");
		sb.Append("(\x4)\t)\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t");
		sb.Append("\x30\x4\x31\t\x31\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4");
		sb.Append("\x35\t\x35\x4\x36\t\x36\x3\x2\x3\x2\x3\x2\x3\x3\a\x3q\n\x3\f");
		sb.Append("\x3\xE\x3t\v\x3\x3\x4\x3\x4\x3\x4\x3\x4\a\x4z\n\x4\f\x4\xE\x4");
		sb.Append("}\v\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5");
		sb.Append("\x3\x5\x3\x5\a\x5\x8A\n\x5\f\x5\xE\x5\x8D\v\x5\x3\x6\x3\x6\x3");
		sb.Append("\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a");
		sb.Append("\x3\a\x5\a\x9E\n\a\x5\a\xA0\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3");
		sb.Append("\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x5");
		sb.Append("\n\xB3\n\n\x3\n\x3\n\x3\v\x5\v\xB8\n\v\x3\v\x3\v\x3\v\x5\v\xBD");
		sb.Append("\n\v\x3\f\x3\f\x3\f\x5\f\xC2\n\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3");
		sb.Append("\r\x3\r\x3\r\a\r\xCC\n\r\f\r\xE\r\xCF\v\r\x5\r\xD1\n\r\x3\r");
		sb.Append("\x3\r\x3\xE\x5\xE\xD6\n\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3");
		sb.Append("\xF\x3\xF\a\xF\xDF\n\xF\f\xF\xE\xF\xE2\v\xF\x3\xF\x3\xF\x3\x10");
		sb.Append("\x3\x10\x3\x10\x5\x10\xE9\n\x10\x3\x11\x3\x11\x3\x11\x3\x11");
		sb.Append("\a\x11\xEF\n\x11\f\x11\xE\x11\xF2\v\x11\x3\x11\x3\x11\x3\x12");
		sb.Append("\x3\x12\x3\x12\x5\x12\xF9\n\x12\x3\x13\x3\x13\x3\x13\x3\x13");
		sb.Append("\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x103\n\x14\x3\x14\x5\x14");
		sb.Append("\x106\n\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\a\x15");
		sb.Append("\x10E\n\x15\f\x15\xE\x15\x111\v\x15\x3\x16\x3\x16\x3\x17\x3");
		sb.Append("\x17\a\x17\x117\n\x17\f\x17\xE\x17\x11A\v\x17\x3\x17\x3\x17");
		sb.Append("\x3\x18\x3\x18\x3\x18\x5\x18\x121\n\x18\x3\x18\x5\x18\x124\n");
		sb.Append("\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x5\x19\x12C\n");
		sb.Append("\x19\x3\x19\x5\x19\x12F\n\x19\x3\x19\x5\x19\x132\n\x19\x3\x1A");
		sb.Append("\x3\x1A\a\x1A\x136\n\x1A\f\x1A\xE\x1A\x139\v\x1A\x3\x1A\x6\x1A");
		sb.Append("\x13C\n\x1A\r\x1A\xE\x1A\x13D\x3\x1B\x3\x1B\x5\x1B\x142\n\x1B");
		sb.Append("\x3\x1B\x6\x1B\x145\n\x1B\r\x1B\xE\x1B\x146\x3\x1C\x5\x1C\x14A");
		sb.Append("\n\x1C\x3\x1C\x3\x1C\x5\x1C\x14E\n\x1C\x3\x1C\x3\x1C\x5\x1C");
		sb.Append("\x152\n\x1C\x3\x1C\x3\x1C\x5\x1C\x156\n\x1C\a\x1C\x158\n\x1C");
		sb.Append("\f\x1C\xE\x1C\x15B\v\x1C\x3\x1D\x3\x1D\x3\x1E\x5\x1E\x160\n");
		sb.Append("\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x165\n\x1E\x3\x1E\a\x1E\x168");
		sb.Append("\n\x1E\f\x1E\xE\x1E\x16B\v\x1E\x3\x1F\x3\x1F\x3\x1F\a\x1F\x170");
		sb.Append("\n\x1F\f\x1F\xE\x1F\x173\v\x1F\x3 \x3 \x3!\x3!\x3!\x5!\x17A");
		sb.Append("\n!\x3\"\x3\"\x3\"\a\"\x17F\n\"\f\"\xE\"\x182\v\"\x3#\x3#\x3");
		sb.Append("#\a#\x187\n#\f#\xE#\x18A\v#\x3$\x3$\x3$\x3$\x5$\x190\n$\x3%");
		sb.Append("\x3%\x3%\a%\x195\n%\f%\xE%\x198\v%\x3&\x3&\x3&\a&\x19D\n&\f");
		sb.Append("&\xE&\x1A0\v&\x3\'\x3\'\x3\'\a\'\x1A5\n\'\f\'\xE\'\x1A8\v\'");
		sb.Append("\x3(\x3(\x3(\x3(\a(\x1AE\n(\f(\xE(\x1B1\v(\x3(\x3(\x3)\a)\x1B6");
		sb.Append("\n)\f)\xE)\x1B9\v)\x3)\x3)\x3*\x3*\x3*\x3*\x3*\a*\x1C2\n*\f");
		sb.Append("*\xE*\x1C5\v*\x3+\x3+\x5+\x1C9\n+\x3+\x3+\x3,\x3,\x3,\x3-\x3");
		sb.Append("-\x3-\x3-\x3.\x3.\x3.\x3.\a.\x1D8\n.\f.\xE.\x1DB\v.\x3.\x3.");
		sb.Append("\x3/\x3/\x3/\x3/\x3/\x3/\x5/\x1E5\n/\x3\x30\x3\x30\x3\x31\x3");
		sb.Append("\x31\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x1EF\n\x32\x3\x33\x3");
		sb.Append("\x33\x3\x34\x3\x34\x3\x35\x3\x35\x3\x36\x3\x36\x3\x36\x2\x2");
		sb.Append("\x37\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&");
		sb.Append("(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64");
		sb.Append("\x66hj\x2\a\x3\x2\xF\x13\x4\x2\x3\x6\'(\x4\x2\t\t))\x3\x2\r");
		sb.Append("\xE\x3\x2\n\v\x206\x2l\x3\x2\x2\x2\x4r\x3\x2\x2\x2\x6u\x3\x2");
		sb.Append("\x2\x2\b\x8B\x3\x2\x2\x2\n\x8E\x3\x2\x2\x2\f\x92\x3\x2\x2\x2");
		sb.Append("\xE\xA1\x3\x2\x2\x2\x10\xAA\x3\x2\x2\x2\x12\xB0\x3\x2\x2\x2");
		sb.Append("\x14\xB7\x3\x2\x2\x2\x16\xBE\x3\x2\x2\x2\x18\xC7\x3\x2\x2\x2");
		sb.Append("\x1A\xD5\x3\x2\x2\x2\x1C\xDA\x3\x2\x2\x2\x1E\xE5\x3\x2\x2\x2");
		sb.Append(" \xEA\x3\x2\x2\x2\"\xF5\x3\x2\x2\x2$\xFA\x3\x2\x2\x2&\xFE\x3");
		sb.Append("\x2\x2\x2(\x10A\x3\x2\x2\x2*\x112\x3\x2\x2\x2,\x114\x3\x2\x2");
		sb.Append("\x2.\x123\x3\x2\x2\x2\x30\x129\x3\x2\x2\x2\x32\x13B\x3\x2\x2");
		sb.Append("\x2\x34\x144\x3\x2\x2\x2\x36\x149\x3\x2\x2\x2\x38\x15C\x3\x2");
		sb.Append("\x2\x2:\x15F\x3\x2\x2\x2<\x16C\x3\x2\x2\x2>\x174\x3\x2\x2\x2");
		sb.Append("@\x176\x3\x2\x2\x2\x42\x17B\x3\x2\x2\x2\x44\x183\x3\x2\x2\x2");
		sb.Append("\x46\x18B\x3\x2\x2\x2H\x191\x3\x2\x2\x2J\x199\x3\x2\x2\x2L\x1A1");
		sb.Append("\x3\x2\x2\x2N\x1AF\x3\x2\x2\x2P\x1B7\x3\x2\x2\x2R\x1BC\x3\x2");
		sb.Append("\x2\x2T\x1C6\x3\x2\x2\x2V\x1CC\x3\x2\x2\x2X\x1CF\x3\x2\x2\x2");
		sb.Append("Z\x1D3\x3\x2\x2\x2\\\x1E4\x3\x2\x2\x2^\x1E6\x3\x2\x2\x2`\x1E8");
		sb.Append("\x3\x2\x2\x2\x62\x1EE\x3\x2\x2\x2\x64\x1F0\x3\x2\x2\x2\x66\x1F2");
		sb.Append("\x3\x2\x2\x2h\x1F4\x3\x2\x2\x2j\x1F6\x3\x2\x2\x2lm\x5\x4\x3");
		sb.Append("\x2mn\x5\b\x5\x2n\x3\x3\x2\x2\x2oq\x5\x6\x4\x2po\x3\x2\x2\x2");
		sb.Append("qt\x3\x2\x2\x2rp\x3\x2\x2\x2rs\x3\x2\x2\x2s\x5\x3\x2\x2\x2t");
		sb.Append("r\x3\x2\x2\x2uv\a\x1D\x2\x2v{\a\x30\x2\x2wx\a*\x2\x2xz\a\x30");
		sb.Append("\x2\x2yw\x3\x2\x2\x2z}\x3\x2\x2\x2{y\x3\x2\x2\x2{|\x3\x2\x2");
		sb.Append("\x2|~\x3\x2\x2\x2}{\x3\x2\x2\x2~\x7F\a\"\x2\x2\x7F\a\x3\x2\x2");
		sb.Append("\x2\x80\x8A\x5\f\a\x2\x81\x8A\x5\xE\b\x2\x82\x8A\x5\x10\t\x2");
		sb.Append("\x83\x8A\x5\x14\v\x2\x84\x8A\x5.\x18\x2\x85\x8A\x5\x12\n\x2");
		sb.Append("\x86\x8A\x5\n\x6\x2\x87\x8A\a\"\x2\x2\x88\x8A\a\x31\x2\x2\x89");
		sb.Append("\x80\x3\x2\x2\x2\x89\x81\x3\x2\x2\x2\x89\x82\x3\x2\x2\x2\x89");
		sb.Append("\x83\x3\x2\x2\x2\x89\x84\x3\x2\x2\x2\x89\x85\x3\x2\x2\x2\x89");
		sb.Append("\x86\x3\x2\x2\x2\x89\x87\x3\x2\x2\x2\x89\x88\x3\x2\x2\x2\x8A");
		sb.Append("\x8D\x3\x2\x2\x2\x8B\x89\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C");
		sb.Append("\t\x3\x2\x2\x2\x8D\x8B\x3\x2\x2\x2\x8E\x8F\x5R*\x2\x8F\x90\x5");
		sb.Append("T+\x2\x90\x91\a\"\x2\x2\x91\v\x3\x2\x2\x2\x92\x93\a\x16\x2\x2");
		sb.Append("\x93\x94\x5> \x2\x94\x95\a\x32\x2\x2\x95\x96\x5\b\x5\x2\x96");
		sb.Append("\x9F\a\x33\x2\x2\x97\x9D\a\x17\x2\x2\x98\x99\a\x32\x2\x2\x99");
		sb.Append("\x9A\x5\b\x5\x2\x9A\x9B\a\x33\x2\x2\x9B\x9E\x3\x2\x2\x2\x9C");
		sb.Append("\x9E\x5\f\a\x2\x9D\x98\x3\x2\x2\x2\x9D\x9C\x3\x2\x2\x2\x9E\xA0");
		sb.Append("\x3\x2\x2\x2\x9F\x97\x3\x2\x2\x2\x9F\xA0\x3\x2\x2\x2\xA0\r\x3");
		sb.Append("\x2\x2\x2\xA1\xA2\a\x19\x2\x2\xA2\xA3\x5\x30\x19\x2\xA3\xA4");
		sb.Append("\a\x30\x2\x2\xA4\xA5\a\x1F\x2\x2\xA5\xA6\x5> \x2\xA6\xA7\a\x32");
		sb.Append("\x2\x2\xA7\xA8\x5\b\x5\x2\xA8\xA9\a\x33\x2\x2\xA9\xF\x3\x2\x2");
		sb.Append("\x2\xAA\xAB\a\x18\x2\x2\xAB\xAC\x5> \x2\xAC\xAD\a\x32\x2\x2");
		sb.Append("\xAD\xAE\x5\b\x5\x2\xAE\xAF\a\x33\x2\x2\xAF\x11\x3\x2\x2\x2");
		sb.Append("\xB0\xB2\a\x15\x2\x2\xB1\xB3\x5> \x2\xB2\xB1\x3\x2\x2\x2\xB2");
		sb.Append("\xB3\x3\x2\x2\x2\xB3\xB4\x3\x2\x2\x2\xB4\xB5\a\"\x2\x2\xB5\x13");
		sb.Append("\x3\x2\x2\x2\xB6\xB8\x5\x38\x1D\x2\xB7\xB6\x3\x2\x2\x2\xB7\xB8");
		sb.Append("\x3\x2\x2\x2\xB8\xBC\x3\x2\x2\x2\xB9\xBD\x5&\x14\x2\xBA\xBD");
		sb.Append("\x5\x16\f\x2\xBB\xBD\x5 \x11\x2\xBC\xB9\x3\x2\x2\x2\xBC\xBA");
		sb.Append("\x3\x2\x2\x2\xBC\xBB\x3\x2\x2\x2\xBD\x15\x3\x2\x2\x2\xBE\xBF");
		sb.Append("\x5\x30\x19\x2\xBF\xC1\x5\x18\r\x2\xC0\xC2\x5\x1C\xF\x2\xC1");
		sb.Append("\xC0\x3\x2\x2\x2\xC1\xC2\x3\x2\x2\x2\xC2\xC3\x3\x2\x2\x2\xC3");
		sb.Append("\xC4\a\x30\x2\x2\xC4\xC5\a!\x2\x2\xC5\xC6\x5$\x13\x2\xC6\x17");
		sb.Append("\x3\x2\x2\x2\xC7\xD0\a#\x2\x2\xC8\xCD\x5\x1A\xE\x2\xC9\xCA\a");
		sb.Append(" \x2\x2\xCA\xCC\x5\x1A\xE\x2\xCB\xC9\x3\x2\x2\x2\xCC\xCF\x3");
		sb.Append("\x2\x2\x2\xCD\xCB\x3\x2\x2\x2\xCD\xCE\x3\x2\x2\x2\xCE\xD1\x3");
		sb.Append("\x2\x2\x2\xCF\xCD\x3\x2\x2\x2\xD0\xC8\x3\x2\x2\x2\xD0\xD1\x3");
		sb.Append("\x2\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2\xD3\a$\x2\x2\xD3\x19\x3\x2");
		sb.Append("\x2\x2\xD4\xD6\a\x1E\x2\x2\xD5\xD4\x3\x2\x2\x2\xD5\xD6\x3\x2");
		sb.Append("\x2\x2\xD6\xD7\x3\x2\x2\x2\xD7\xD8\x5\x30\x19\x2\xD8\xD9\a\x30");
		sb.Append("\x2\x2\xD9\x1B\x3\x2\x2\x2\xDA\xDB\a\'\x2\x2\xDB\xE0\x5\x1E");
		sb.Append("\x10\x2\xDC\xDD\a \x2\x2\xDD\xDF\x5\x1E\x10\x2\xDE\xDC\x3\x2");
		sb.Append("\x2\x2\xDF\xE2\x3\x2\x2\x2\xE0\xDE\x3\x2\x2\x2\xE0\xE1\x3\x2");
		sb.Append("\x2\x2\xE1\xE3\x3\x2\x2\x2\xE2\xE0\x3\x2\x2\x2\xE3\xE4\a(\x2");
		sb.Append("\x2\xE4\x1D\x3\x2\x2\x2\xE5\xE8\a\x30\x2\x2\xE6\xE7\a,\x2\x2");
		sb.Append("\xE7\xE9\a\x30\x2\x2\xE8\xE6\x3\x2\x2\x2\xE8\xE9\x3\x2\x2\x2");
		sb.Append("\xE9\x1F\x3\x2\x2\x2\xEA\xEB\x5\x30\x19\x2\xEB\xF0\x5\"\x12");
		sb.Append("\x2\xEC\xED\a \x2\x2\xED\xEF\x5\"\x12\x2\xEE\xEC\x3\x2\x2\x2");
		sb.Append("\xEF\xF2\x3\x2\x2\x2\xF0\xEE\x3\x2\x2\x2\xF0\xF1\x3\x2\x2\x2");
		sb.Append("\xF1\xF3\x3\x2\x2\x2\xF2\xF0\x3\x2\x2\x2\xF3\xF4\a\"\x2\x2\xF4");
		sb.Append("!\x3\x2\x2\x2\xF5\xF8\a\x30\x2\x2\xF6\xF7\a!\x2\x2\xF7\xF9\x5");
		sb.Append("> \x2\xF8\xF6\x3\x2\x2\x2\xF8\xF9\x3\x2\x2\x2\xF9#\x3\x2\x2");
		sb.Append("\x2\xFA\xFB\a\x32\x2\x2\xFB\xFC\x5\b\x5\x2\xFC\xFD\a\x33\x2");
		sb.Append("\x2\xFD%\x3\x2\x2\x2\xFE\xFF\a\x14\x2\x2\xFF\x102\a\x30\x2\x2");
		sb.Append("\x100\x101\a,\x2\x2\x101\x103\x5(\x15\x2\x102\x100\x3\x2\x2");
		sb.Append("\x2\x102\x103\x3\x2\x2\x2\x103\x105\x3\x2\x2\x2\x104\x106\x5");
		sb.Append("\x1C\xF\x2\x105\x104\x3\x2\x2\x2\x105\x106\x3\x2\x2\x2\x106");
		sb.Append("\x107\x3\x2\x2\x2\x107\x108\a!\x2\x2\x108\x109\x5,\x17\x2\x109");
		sb.Append("\'\x3\x2\x2\x2\x10A\x10F\x5*\x16\x2\x10B\x10C\a \x2\x2\x10C");
		sb.Append("\x10E\x5*\x16\x2\x10D\x10B\x3\x2\x2\x2\x10E\x111\x3\x2\x2\x2");
		sb.Append("\x10F\x10D\x3\x2\x2\x2\x10F\x110\x3\x2\x2\x2\x110)\x3\x2\x2");
		sb.Append("\x2\x111\x10F\x3\x2\x2\x2\x112\x113\a\x30\x2\x2\x113+\x3\x2");
		sb.Append("\x2\x2\x114\x118\a\x32\x2\x2\x115\x117\x5\x14\v\x2\x116\x115");
		sb.Append("\x3\x2\x2\x2\x117\x11A\x3\x2\x2\x2\x118\x116\x3\x2\x2\x2\x118");
		sb.Append("\x119\x3\x2\x2\x2\x119\x11B\x3\x2\x2\x2\x11A\x118\x3\x2\x2\x2");
		sb.Append("\x11B\x11C\a\x33\x2\x2\x11C-\x3\x2\x2\x2\x11D\x120\x5R*\x2\x11E");
		sb.Append("\x121\x5V,\x2\x11F\x121\x5X-\x2\x120\x11E\x3\x2\x2\x2\x120\x11F");
		sb.Append("\x3\x2\x2\x2\x121\x124\x3\x2\x2\x2\x122\x124\x5\\/\x2\x123\x11D");
		sb.Append("\x3\x2\x2\x2\x123\x122\x3\x2\x2\x2\x124\x125\x3\x2\x2\x2\x125");
		sb.Append("\x126\a!\x2\x2\x126\x127\x5> \x2\x127\x128\a\"\x2\x2\x128/\x3");
		sb.Append("\x2\x2\x2\x129\x12B\a\x30\x2\x2\x12A\x12C\x5\x34\x1B\x2\x12B");
		sb.Append("\x12A\x3\x2\x2\x2\x12B\x12C\x3\x2\x2\x2\x12C\x12E\x3\x2\x2\x2");
		sb.Append("\x12D\x12F\x5\x32\x1A\x2\x12E\x12D\x3\x2\x2\x2\x12E\x12F\x3");
		sb.Append("\x2\x2\x2\x12F\x131\x3\x2\x2\x2\x130\x132\x5Z.\x2\x131\x130");
		sb.Append("\x3\x2\x2\x2\x131\x132\x3\x2\x2\x2\x132\x31\x3\x2\x2\x2\x133");
		sb.Append("\x137\a%\x2\x2\x134\x136\a \x2\x2\x135\x134\x3\x2\x2\x2\x136");
		sb.Append("\x139\x3\x2\x2\x2\x137\x135\x3\x2\x2\x2\x137\x138\x3\x2\x2\x2");
		sb.Append("\x138\x13A\x3\x2\x2\x2\x139\x137\x3\x2\x2\x2\x13A\x13C\a&\x2");
		sb.Append("\x2\x13B\x133\x3\x2\x2\x2\x13C\x13D\x3\x2\x2\x2\x13D\x13B\x3");
		sb.Append("\x2\x2\x2\x13D\x13E\x3\x2\x2\x2\x13E\x33\x3\x2\x2\x2\x13F\x141");
		sb.Append("\a#\x2\x2\x140\x142\x5\x36\x1C\x2\x141\x140\x3\x2\x2\x2\x141");
		sb.Append("\x142\x3\x2\x2\x2\x142\x143\x3\x2\x2\x2\x143\x145\a$\x2\x2\x144");
		sb.Append("\x13F\x3\x2\x2\x2\x145\x146\x3\x2\x2\x2\x146\x144\x3\x2\x2\x2");
		sb.Append("\x146\x147\x3\x2\x2\x2\x147\x35\x3\x2\x2\x2\x148\x14A\a\x1E");
		sb.Append("\x2\x2\x149\x148\x3\x2\x2\x2\x149\x14A\x3\x2\x2\x2\x14A\x14B");
		sb.Append("\x3\x2\x2\x2\x14B\x14D\x5\x30\x19\x2\x14C\x14E\a\x30\x2\x2\x14D");
		sb.Append("\x14C\x3\x2\x2\x2\x14D\x14E\x3\x2\x2\x2\x14E\x159\x3\x2\x2\x2");
		sb.Append("\x14F\x151\a \x2\x2\x150\x152\a\x1E\x2\x2\x151\x150\x3\x2\x2");
		sb.Append("\x2\x151\x152\x3\x2\x2\x2\x152\x153\x3\x2\x2\x2\x153\x155\x5");
		sb.Append("\x30\x19\x2\x154\x156\a\x30\x2\x2\x155\x154\x3\x2\x2\x2\x155");
		sb.Append("\x156\x3\x2\x2\x2\x156\x158\x3\x2\x2\x2\x157\x14F\x3\x2\x2\x2");
		sb.Append("\x158\x15B\x3\x2\x2\x2\x159\x157\x3\x2\x2\x2\x159\x15A\x3\x2");
		sb.Append("\x2\x2\x15A\x37\x3\x2\x2\x2\x15B\x159\x3\x2\x2\x2\x15C\x15D");
		sb.Append("\t\x2\x2\x2\x15D\x39\x3\x2\x2\x2\x15E\x160\a\x1E\x2\x2\x15F");
		sb.Append("\x15E\x3\x2\x2\x2\x15F\x160\x3\x2\x2\x2\x160\x161\x3\x2\x2\x2");
		sb.Append("\x161\x169\x5> \x2\x162\x164\a \x2\x2\x163\x165\a\x1E\x2\x2");
		sb.Append("\x164\x163\x3\x2\x2\x2\x164\x165\x3\x2\x2\x2\x165\x166\x3\x2");
		sb.Append("\x2\x2\x166\x168\x5> \x2\x167\x162\x3\x2\x2\x2\x168\x16B\x3");
		sb.Append("\x2\x2\x2\x169\x167\x3\x2\x2\x2\x169\x16A\x3\x2\x2\x2\x16A;");
		sb.Append("\x3\x2\x2\x2\x16B\x169\x3\x2\x2\x2\x16C\x171\x5> \x2\x16D\x16E");
		sb.Append("\a \x2\x2\x16E\x170\x5> \x2\x16F\x16D\x3\x2\x2\x2\x170\x173");
		sb.Append("\x3\x2\x2\x2\x171\x16F\x3\x2\x2\x2\x171\x172\x3\x2\x2\x2\x172");
		sb.Append("=\x3\x2\x2\x2\x173\x171\x3\x2\x2\x2\x174\x175\x5@!\x2\x175?");
		sb.Append("\x3\x2\x2\x2\x176\x179\x5\x42\"\x2\x177\x178\a\x1A\x2\x2\x178");
		sb.Append("\x17A\x5\x42\"\x2\x179\x177\x3\x2\x2\x2\x179\x17A\x3\x2\x2\x2");
		sb.Append("\x17A\x41\x3\x2\x2\x2\x17B\x180\x5\x44#\x2\x17C\x17D\a\x1C\x2");
		sb.Append("\x2\x17D\x17F\x5\x44#\x2\x17E\x17C\x3\x2\x2\x2\x17F\x182\x3");
		sb.Append("\x2\x2\x2\x180\x17E\x3\x2\x2\x2\x180\x181\x3\x2\x2\x2\x181\x43");
		sb.Append("\x3\x2\x2\x2\x182\x180\x3\x2\x2\x2\x183\x188\x5\x46$\x2\x184");
		sb.Append("\x185\a\x1B\x2\x2\x185\x187\x5\x46$\x2\x186\x184\x3\x2\x2\x2");
		sb.Append("\x187\x18A\x3\x2\x2\x2\x188\x186\x3\x2\x2\x2\x188\x189\x3\x2");
		sb.Append("\x2\x2\x189\x45\x3\x2\x2\x2\x18A\x188\x3\x2\x2\x2\x18B\x18F");
		sb.Append("\x5H%\x2\x18C\x18D\x5^\x30\x2\x18D\x18E\x5H%\x2\x18E\x190\x3");
		sb.Append("\x2\x2\x2\x18F\x18C\x3\x2\x2\x2\x18F\x190\x3\x2\x2\x2\x190G");
		sb.Append("\x3\x2\x2\x2\x191\x196\x5J&\x2\x192\x193\a\a\x2\x2\x193\x195");
		sb.Append("\x5J&\x2\x194\x192\x3\x2\x2\x2\x195\x198\x3\x2\x2\x2\x196\x194");
		sb.Append("\x3\x2\x2\x2\x196\x197\x3\x2\x2\x2\x197I\x3\x2\x2\x2\x198\x196");
		sb.Append("\x3\x2\x2\x2\x199\x19E\x5L\'\x2\x19A\x19B\a\b\x2\x2\x19B\x19D");
		sb.Append("\x5L\'\x2\x19C\x19A\x3\x2\x2\x2\x19D\x1A0\x3\x2\x2\x2\x19E\x19C");
		sb.Append("\x3\x2\x2\x2\x19E\x19F\x3\x2\x2\x2\x19FK\x3\x2\x2\x2\x1A0\x19E");
		sb.Append("\x3\x2\x2\x2\x1A1\x1A6\x5N(\x2\x1A2\x1A3\a+\x2\x2\x1A3\x1A5");
		sb.Append("\x5N(\x2\x1A4\x1A2\x3\x2\x2\x2\x1A5\x1A8\x3\x2\x2\x2\x1A6\x1A4");
		sb.Append("\x3\x2\x2\x2\x1A6\x1A7\x3\x2\x2\x2\x1A7M\x3\x2\x2\x2\x1A8\x1A6");
		sb.Append("\x3\x2\x2\x2\x1A9\x1AA\a#\x2\x2\x1AA\x1AB\x5\x30\x19\x2\x1AB");
		sb.Append("\x1AC\a$\x2\x2\x1AC\x1AE\x3\x2\x2\x2\x1AD\x1A9\x3\x2\x2\x2\x1AE");
		sb.Append("\x1B1\x3\x2\x2\x2\x1AF\x1AD\x3\x2\x2\x2\x1AF\x1B0\x3\x2\x2\x2");
		sb.Append("\x1B0\x1B2\x3\x2\x2\x2\x1B1\x1AF\x3\x2\x2\x2\x1B2\x1B3\x5P)");
		sb.Append("\x2\x1B3O\x3\x2\x2\x2\x1B4\x1B6\x5`\x31\x2\x1B5\x1B4\x3\x2\x2");
		sb.Append("\x2\x1B6\x1B9\x3\x2\x2\x2\x1B7\x1B5\x3\x2\x2\x2\x1B7\x1B8\x3");
		sb.Append("\x2\x2\x2\x1B8\x1BA\x3\x2\x2\x2\x1B9\x1B7\x3\x2\x2\x2\x1BA\x1BB");
		sb.Append("\x5R*\x2\x1BBQ\x3\x2\x2\x2\x1BC\x1C3\x5\\/\x2\x1BD\x1C2\x5T");
		sb.Append("+\x2\x1BE\x1C2\x5V,\x2\x1BF\x1C2\x5X-\x2\x1C0\x1C2\x5Z.\x2\x1C1");
		sb.Append("\x1BD\x3\x2\x2\x2\x1C1\x1BE\x3\x2\x2\x2\x1C1\x1BF\x3\x2\x2\x2");
		sb.Append("\x1C1\x1C0\x3\x2\x2\x2\x1C2\x1C5\x3\x2\x2\x2\x1C3\x1C1\x3\x2");
		sb.Append("\x2\x2\x1C3\x1C4\x3\x2\x2\x2\x1C4S\x3\x2\x2\x2\x1C5\x1C3\x3");
		sb.Append("\x2\x2\x2\x1C6\x1C8\a#\x2\x2\x1C7\x1C9\x5:\x1E\x2\x1C8\x1C7");
		sb.Append("\x3\x2\x2\x2\x1C8\x1C9\x3\x2\x2\x2\x1C9\x1CA\x3\x2\x2\x2\x1CA");
		sb.Append("\x1CB\a$\x2\x2\x1CBU\x3\x2\x2\x2\x1CC\x1CD\a*\x2\x2\x1CD\x1CE");
		sb.Append("\a\x30\x2\x2\x1CEW\x3\x2\x2\x2\x1CF\x1D0\a%\x2\x2\x1D0\x1D1");
		sb.Append("\x5<\x1F\x2\x1D1\x1D2\a&\x2\x2\x1D2Y\x3\x2\x2\x2\x1D3\x1D4\a");
		sb.Append("\'\x2\x2\x1D4\x1D9\x5\x30\x19\x2\x1D5\x1D6\a \x2\x2\x1D6\x1D8");
		sb.Append("\x5\x30\x19\x2\x1D7\x1D5\x3\x2\x2\x2\x1D8\x1DB\x3\x2\x2\x2\x1D9");
		sb.Append("\x1D7\x3\x2\x2\x2\x1D9\x1DA\x3\x2\x2\x2\x1DA\x1DC\x3\x2\x2\x2");
		sb.Append("\x1DB\x1D9\x3\x2\x2\x2\x1DC\x1DD\a(\x2\x2\x1DD[\x3\x2\x2\x2");
		sb.Append("\x1DE\x1E5\a\x30\x2\x2\x1DF\x1E5\x5\x62\x32\x2\x1E0\x1E1\a#");
		sb.Append("\x2\x2\x1E1\x1E2\x5> \x2\x1E2\x1E3\a$\x2\x2\x1E3\x1E5\x3\x2");
		sb.Append("\x2\x2\x1E4\x1DE\x3\x2\x2\x2\x1E4\x1DF\x3\x2\x2\x2\x1E4\x1E0");
		sb.Append("\x3\x2\x2\x2\x1E5]\x3\x2\x2\x2\x1E6\x1E7\t\x3\x2\x2\x1E7_\x3");
		sb.Append("\x2\x2\x2\x1E8\x1E9\t\x4\x2\x2\x1E9\x61\x3\x2\x2\x2\x1EA\x1EF");
		sb.Append("\x5\x64\x33\x2\x1EB\x1EF\x5\x66\x34\x2\x1EC\x1EF\x5h\x35\x2");
		sb.Append("\x1ED\x1EF\x5j\x36\x2\x1EE\x1EA\x3\x2\x2\x2\x1EE\x1EB\x3\x2");
		sb.Append("\x2\x2\x1EE\x1EC\x3\x2\x2\x2\x1EE\x1ED\x3\x2\x2\x2\x1EF\x63");
		sb.Append("\x3\x2\x2\x2\x1F0\x1F1\t\x5\x2\x2\x1F1\x65\x3\x2\x2\x2\x1F2");
		sb.Append("\x1F3\a/\x2\x2\x1F3g\x3\x2\x2\x2\x1F4\x1F5\t\x6\x2\x2\x1F5i");
		sb.Append("\x3\x2\x2\x2\x1F6\x1F7\a\f\x2\x2\x1F7k\x3\x2\x2\x2\x38r{\x89");
		sb.Append("\x8B\x9D\x9F\xB2\xB7\xBC\xC1\xCD\xD0\xD5\xE0\xE8\xF0\xF8\x102");
		sb.Append("\x105\x10F\x118\x120\x123\x12B\x12E\x131\x137\x13D\x141\x146");
		sb.Append("\x149\x14D\x151\x155\x159\x15F\x164\x169\x171\x179\x180\x188");
		sb.Append("\x18F\x196\x19E\x1A6\x1AF\x1B7\x1C1\x1C3\x1C8\x1D9\x1E4\x1EE");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
} // namespace libcompiler.Parser
