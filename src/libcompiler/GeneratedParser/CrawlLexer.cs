//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /dataa/home/joha/src/csharp/crawl/src/libcompiler/Crawl.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace libcompiler.Parser {
 
using System.Collections.Generic; 
using System.Linq; 
using libcompiler.ExtensionMethods;

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class CrawlLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, ADDITIVE_SYMBOL=5, MULTIPLICATIVE_SYMBOL=6, 
		MINUS=7, POINT_REAL=8, EXPONENT_REAL=9, STRING_LITERAL=10, TRUE=11, FALSE=12, 
		PUBLIC=13, PRIVATE=14, PROTECTED=15, PROTECTED_INTERNAL=16, INTERNAL=17, 
		CLASS=18, RETURN=19, IF=20, ELSE=21, WHILE=22, FOR=23, TO=24, AND=25, 
		OR=26, IMPORT=27, REFERENCE=28, FOR_LOOP_SEPERATOR=29, ITEM_SEPARATOR=30, 
		ASSIGNMENT_SYMBOL=31, END_OF_STATEMENT=32, LPARENTHESIS=33, RPARENTHESIS=34, 
		LSQUAREBRACKET=35, RSQUAREBRACKET=36, LANGLEBRACKET=37, RANGLEBRACKET=38, 
		INVERT=39, DOT=40, EXPONENT=41, INHERITANCE_OPERATOR=42, COMMENT=43, WS=44, 
		NUMBER=45, IDENTIFIER=46, NEWLINE=47;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "ADDITIVE_SYMBOL", "MULTIPLICATIVE_SYMBOL", 
		"MINUS", "POINT_REAL", "EXPONENT_REAL", "STRING_LITERAL", "TRUE", "FALSE", 
		"PUBLIC", "PRIVATE", "PROTECTED", "PROTECTED_INTERNAL", "INTERNAL", "CLASS", 
		"RETURN", "IF", "ELSE", "WHILE", "FOR", "TO", "AND", "OR", "IMPORT", "REFERENCE", 
		"FOR_LOOP_SEPERATOR", "ITEM_SEPARATOR", "ASSIGNMENT_SYMBOL", "END_OF_STATEMENT", 
		"LPARENTHESIS", "RPARENTHESIS", "LSQUAREBRACKET", "RSQUAREBRACKET", "LANGLEBRACKET", 
		"RANGLEBRACKET", "INVERT", "DOT", "EXPONENT", "INHERITANCE_OPERATOR", 
		"COMMENT", "WS", "NUMBER", "IDENTIFIER", "SPACES", "DIGIT", "STRING_ESCAPE_SEQ", 
		"EXPONENT_END", "NEWLINE", "STARTSYMBOL", "SYMBOL"
	};


	// A queue where extra tokens are pushed on (see the NEWLINE lexer rule).
	  private List<IToken> tokens = new List<IToken>();
	  // The stack that keeps track of the indentation level.
	  private Stack<int> indents = new Stack<int>();
	  // The amount of opened braces, brackets and parenthesis.
	  private int opened = 0;
	  // The most recently produced token.
	  private IToken lastToken = null;
	  
	  private string Escape(string s)
	  {
	    StringBuilder sb = new StringBuilder();
	    foreach (char c in s)
	    {
	      if (c == '\n')
	        sb.Append("\\n");
	      else if (c == '\r')
	        sb.Append("\\r");
	      else if (c == '\t')
	        sb.Append("\\t");
	      else sb.Append(c);
	    }
	    return sb.ToString();
	  }
	  
	  public override void Emit(IToken t) {
		TraceListners.ParserTraceListner?.WriteLine(
	        $"Emitting :{CrawlParser.DefaultVocabulary.GetSymbolicName(t.Type)}{(string.IsNullOrEmpty(t.Text) ? string.Empty : " \"" + Escape(t.Text) + "\"")}({t.Channel})", 
	        "Lexer"
	    );
		Token = t;
	    tokens.Add(t);
	  }

	  public override IToken NextToken() {
	    // Check if the end-of-file is ahead and there are still some DEDENTS expected.
	    if (InputStream.LA(1) == IntStreamConstants.EOF && this.indents.Count > 0) {
	      // Remove any trailing EOF tokens from our buffer.
	      for (int i = tokens.Count - 1; i >= 0; i--) {
	        if (tokens[i].Type == IntStreamConstants.EOF) {
	          tokens.RemoveAt(i);
	        }
	      }

	      // First emit an extra line break that serves as the end of the statement.
	      this.Emit(CommonToken(CrawlParser.NEWLINE, "\n"));

	      // Now emit as much DEDENT tokens as needed.
	      while (indents.Count > 0) {
	        this.Emit(CreateDedent());
	        indents.Pop();
	      }

	      // Put the EOF back on the token stream.
	      this.Emit(CommonToken(IntStreamConstants.EOF, "<EOF>"));
	    }

	    IToken next = base.NextToken();

	    if (next.Channel == TokenConstants.DefaultChannel) {
	      // Keep track of the last token on the default channel.
	      this.lastToken = next;
	    }

	    return tokens.Count == 0 ? next : tokens.RemoveHead();
	  }

	  private IToken CreateDedent() {
	    CommonToken dedent = CommonToken(CrawlParser.DEDENT, "DEDENT");
	    dedent.Line = this.lastToken.Line ;
	    return dedent;
	  }

	  private CommonToken CommonToken(int type, string text, int channel = TokenConstants.DefaultChannel) {
	    int stop = this.CharIndex - 1;
	    int start = text.Length == 0 ? stop : stop - text.Length + 1;
	    return new CommonToken(
			new Antlr4.Runtime.Sharpen.Tuple<ITokenSource, ICharStream>(this, (this as ITokenSource).InputStream),
		    type, 
			channel, 
			start, 
			stop
		);
	  }

	  // Calculates the indentation of the provided spaces, taking the
	  // following rules into account:
	  //
	  // "Tabs are replaced (from left to right) by one to eight spaces
	  //  such that the total number of characters up to and including
	  //  the replacement is a multiple of eight [...]"
	  //
	  //  -- https://docs.python.org/3.1/reference/lexical_analysis.html#indentation
	  
	  //TODO: Fix it. This is code from python, that belives tab = 8 spaces
	  static int GetIndentationCount(string spaces) {
	    int count = 0;
	    foreach (char ch in spaces) {
	      switch (ch) {
	        case '\t':
	          count += 8 - (count % 8);
	          break;
	        default:
	          // A normal space char.
	          count++;
			  break;
	      }
	    }

	    return count;
	  }

	  bool AtStartOfInput() {
	    return base.CharIndex == 0 && base.Line == 1;
		//TODO: MAKE SURE CHAR INDEX IS WHAT I THINK IT IS (char column)
	  }


	public CrawlLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'>='", "'=='", "'!='", "'<='", null, null, "'-'", null, null, null, 
		"'sandt'", "'falsk'", null, "'privat'", "'beskyttet'", "'beskyttet intern'", 
		"'intern'", "'klasse'", "'returner'", "'hvis'", "'ellers'", "'mens'", 
		"'for'", "'til'", "'og'", "'eller'", "'importer'", "'reference'", "'fra'", 
		"','", "'='", "';'", "'('", "')'", "'['", "']'", "'<'", "'>'", "'ikke'", 
		"'.'", "'**'", "':'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "ADDITIVE_SYMBOL", "MULTIPLICATIVE_SYMBOL", 
		"MINUS", "POINT_REAL", "EXPONENT_REAL", "STRING_LITERAL", "TRUE", "FALSE", 
		"PUBLIC", "PRIVATE", "PROTECTED", "PROTECTED_INTERNAL", "INTERNAL", "CLASS", 
		"RETURN", "IF", "ELSE", "WHILE", "FOR", "TO", "AND", "OR", "IMPORT", "REFERENCE", 
		"FOR_LOOP_SEPERATOR", "ITEM_SEPARATOR", "ASSIGNMENT_SYMBOL", "END_OF_STATEMENT", 
		"LPARENTHESIS", "RPARENTHESIS", "LSQUAREBRACKET", "RSQUAREBRACKET", "LANGLEBRACKET", 
		"RANGLEBRACKET", "INVERT", "DOT", "EXPONENT", "INHERITANCE_OPERATOR", 
		"COMMENT", "WS", "NUMBER", "IDENTIFIER", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Crawl.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static CrawlLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 32 : LPARENTHESIS_action(_localctx, actionIndex); break;
		case 33 : RPARENTHESIS_action(_localctx, actionIndex); break;
		case 34 : LSQUAREBRACKET_action(_localctx, actionIndex); break;
		case 35 : RSQUAREBRACKET_action(_localctx, actionIndex); break;
		case 50 : NEWLINE_action(_localctx, actionIndex); break;
		}
	}
	private void LPARENTHESIS_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: opened++; break;
		}
	}
	private void RPARENTHESIS_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 1: opened--; break;
		}
	}
	private void LSQUAREBRACKET_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 2: opened++; break;
		}
	}
	private void RSQUAREBRACKET_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 3: opened--; break;
		}
	}
	private void NEWLINE_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 4: 
		     string newLine = new string(Text.Where(x => x == '\n' || x == '\r').ToArray());
			 string spaces = new string(Text.Where(x => !(x == '\n' || x == '\r')).ToArray());
		     int next = InputStream.LA(1);
		     if (opened > 0 || next == '\r' || next == '\n' || next == '#') {
		       // If we're inside a list or on a blank line, ignore all indents, 
		       // dedents and line breaks.
		       Skip();
		     }
		     else {
		       Emit(CommonToken(NEWLINE, newLine, TokenConstants.HiddenChannel));
		       int indent = GetIndentationCount(spaces);
		       int previous = indents.Count == 0 ? 0 : indents.Peek();
		       if (indent == previous) {
		         // skip indents of the same size as the present indent-size
		         Skip();
		       }
		       else if (indent > previous) {
		         indents.Push(indent);
		         Emit(CommonToken(CrawlParser.INDENT, spaces));
		       }
		       else {
		         // Possibly emit more than 1 DEDENT token.
		         while(indents.Count > 0 && indents.Peek() > indent) {
		           this.Emit(CreateDedent());
		           indents.Pop();
		         }
		       }
		     }
		    break;
		}
	}
	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 50 : return NEWLINE_sempred(_localctx, predIndex);
		}
		return true;
	}
	private bool NEWLINE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return AtStartOfInput();
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x31");
		sb.Append("\x193\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6");
		sb.Append("\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f");
		sb.Append("\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4");
		sb.Append("\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16");
		sb.Append("\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B");
		sb.Append("\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4");
		sb.Append(" \t \x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4");
		sb.Append("(\t(\x4)\t)\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30");
		sb.Append("\t\x30\x4\x31\t\x31\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4");
		sb.Append("\x35\t\x35\x4\x36\t\x36\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x5\x6|\n\x6");
		sb.Append("\x3\a\x3\a\x3\b\x3\b\x3\t\x5\t\x83\n\t\x3\t\x3\t\x3\t\x3\n\x3");
		sb.Append("\n\x5\n\x8A\n\n\x3\n\x3\n\x3\v\x3\v\x3\v\a\v\x91\n\v\f\v\xE");
		sb.Append("\v\x94\v\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r");
		sb.Append("\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3");
		sb.Append("\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3");
		sb.Append("\xE\x3\xE\x3\xE\x5\xE\xB7\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF");
		sb.Append("\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10");
		sb.Append("\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3");
		sb.Append("\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11");
		sb.Append("\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3");
		sb.Append("\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13");
		sb.Append("\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3");
		sb.Append("\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16");
		sb.Append("\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3");
		sb.Append("\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19");
		sb.Append("\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3");
		sb.Append("\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C");
		sb.Append("\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3");
		sb.Append("\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F");
		sb.Append("\x3 \x3 \x3!\x3!\x3\"\x3\"\x3\"\x3#\x3#\x3#\x3$\x3$\x3$\x3%");
		sb.Append("\x3%\x3%\x3&\x3&\x3\'\x3\'\x3(\x3(\x3(\x3(\x3(\x3)\x3)\x3*\x3");
		sb.Append("*\x3*\x3+\x3+\x3,\x3,\x3,\x3,\a,\x151\n,\f,\xE,\x154\v,\x3,");
		sb.Append("\x3,\x3-\x6-\x159\n-\r-\xE-\x15A\x3-\x3-\x3.\x6.\x160\n.\r.");
		sb.Append("\xE.\x161\x3/\x3/\a/\x166\n/\f/\xE/\x169\v/\x3\x30\x6\x30\x16C");
		sb.Append("\n\x30\r\x30\xE\x30\x16D\x3\x31\x3\x31\x3\x32\x3\x32\x3\x32");
		sb.Append("\x3\x33\x3\x33\x5\x33\x177\n\x33\x3\x33\x3\x33\x3\x34\x3\x34");
		sb.Append("\x3\x34\x5\x34\x17E\n\x34\x3\x34\x3\x34\x5\x34\x182\n\x34\x3");
		sb.Append("\x34\x5\x34\x185\n\x34\x5\x34\x187\n\x34\x3\x34\x3\x34\x3\x34");
		sb.Append("\x3\x34\x3\x35\x5\x35\x18E\n\x35\x3\x36\x3\x36\x5\x36\x192\n");
		sb.Append("\x36\x2\x2\x37\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x13");
		sb.Append("\v\x15\f\x17\r\x19\xE\x1B\xF\x1D\x10\x1F\x11!\x12#\x13%\x14");
		sb.Append("\'\x15)\x16+\x17-\x18/\x19\x31\x1A\x33\x1B\x35\x1C\x37\x1D\x39");
		sb.Append("\x1E;\x1F= ?!\x41\"\x43#\x45$G%I&K\'M(O)Q*S+U,W-Y.[/]\x30_\x2");
		sb.Append("\x61\x2\x63\x2\x65\x2g\x31i\x2k\x2\x3\x2\t\x5\x2\'\',,\x31\x31");
		sb.Append("\x6\x2\f\f\xF\xF$$^^\x4\x2\f\f\xF\xF\x4\x2\v\v\"\"\x4\x2GGg");
		sb.Append("g\x129\x2\x43\\\x61\x61\x63|\xAC\xAC\xB7\xB7\xBC\xBC\xC2\xD8");
		sb.Append("\xDA\xF8\xFA\x243\x252\x2C3\x2C8\x2D3\x2E2\x2E6\x2F0\x2F0\x37C");
		sb.Append("\x37C\x388\x388\x38A\x38C\x38E\x38E\x390\x3A3\x3A5\x3D0\x3D2");
		sb.Append("\x3F7\x3F9\x483\x48C\x4D0\x4D2\x4FB\x502\x511\x533\x558\x55B");
		sb.Append("\x55B\x563\x589\x5D2\x5EC\x5F2\x5F4\x623\x63C\x642\x64C\x670");
		sb.Append("\x671\x673\x6D5\x6D7\x6D7\x6E7\x6E8\x6F0\x6F1\x6FC\x6FE\x701");
		sb.Append("\x701\x712\x712\x714\x731\x74F\x76F\x782\x7A7\x7B3\x7B3\x906");
		sb.Append("\x93B\x93F\x93F\x952\x952\x95A\x963\x97F\x97F\x987\x98E\x991");
		sb.Append("\x992\x995\x9AA\x9AC\x9B2\x9B4\x9B4\x9B8\x9BB\x9BF\x9BF\x9D0");
		sb.Append("\x9D0\x9DE\x9DF\x9E1\x9E3\x9F2\x9F3\xA07\xA0C\xA11\xA12\xA15");
		sb.Append("\xA2A\xA2C\xA32\xA34\xA35\xA37\xA38\xA3A\xA3B\xA5B\xA5E\xA60");
		sb.Append("\xA60\xA74\xA76\xA87\xA8F\xA91\xA93\xA95\xAAA\xAAC\xAB2\xAB4");
		sb.Append("\xAB5\xAB7\xABB\xABF\xABF\xAD2\xAD2\xAE2\xAE3\xB07\xB0E\xB11");
		sb.Append("\xB12\xB15\xB2A\xB2C\xB32\xB34\xB35\xB37\xB3B\xB3F\xB3F\xB5E");
		sb.Append("\xB5F\xB61\xB63\xB73\xB73\xB85\xB85\xB87\xB8C\xB90\xB92\xB94");
		sb.Append("\xB97\xB9B\xB9C\xB9E\xB9E\xBA0\xBA1\xBA5\xBA6\xBAA\xBAC\xBB0");
		sb.Append("\xBBB\xC07\xC0E\xC10\xC12\xC14\xC2A\xC2C\xC35\xC37\xC3B\xC62");
		sb.Append("\xC63\xC87\xC8E\xC90\xC92\xC94\xCAA\xCAC\xCB5\xCB7\xCBB\xCBF");
		sb.Append("\xCBF\xCE0\xCE0\xCE2\xCE3\xD07\xD0E\xD10\xD12\xD14\xD2A\xD2C");
		sb.Append("\xD3B\xD62\xD63\xD87\xD98\xD9C\xDB3\xDB5\xDBD\xDBF\xDBF\xDC2");
		sb.Append("\xDC8\xE03\xE32\xE34\xE35\xE42\xE48\xE83\xE84\xE86\xE86\xE89");
		sb.Append("\xE8A\xE8C\xE8C\xE8F\xE8F\xE96\xE99\xE9B\xEA1\xEA3\xEA5\xEA7");
		sb.Append("\xEA7\xEA9\xEA9\xEAC\xEAD\xEAF\xEB2\xEB4\xEB5\xEBF\xEBF\xEC2");
		sb.Append("\xEC6\xEC8\xEC8\xEDE\xEDF\xF02\xF02\xF42\xF49\xF4B\xF6C\xF8A");
		sb.Append("\xF8D\x1002\x1023\x1025\x1029\x102B\x102C\x1052\x1057\x10A2");
		sb.Append("\x10C7\x10D2\x10FC\x10FE\x10FE\x1102\x115B\x1161\x11A4\x11AA");
		sb.Append("\x11FB\x1202\x124A\x124C\x124F\x1252\x1258\x125A\x125A\x125C");
		sb.Append("\x125F\x1262\x128A\x128C\x128F\x1292\x12B2\x12B4\x12B7\x12BA");
		sb.Append("\x12C0\x12C2\x12C2\x12C4\x12C7\x12CA\x12D8\x12DA\x1312\x1314");
		sb.Append("\x1317\x131A\x135C\x1382\x1391\x13A2\x13F6\x1403\x166E\x1671");
		sb.Append("\x1678\x1683\x169C\x16A2\x16EC\x16F0\x16F2\x1702\x170E\x1710");
		sb.Append("\x1713\x1722\x1733\x1742\x1753\x1762\x176E\x1770\x1772\x1782");
		sb.Append("\x17B5\x17D9\x17D9\x17DE\x17DE\x1822\x1879\x1882\x18AA\x1902");
		sb.Append("\x191E\x1952\x196F\x1972\x1976\x1982\x19AB\x19C3\x19C9\x1A02");
		sb.Append("\x1A18\x1D02\x1DC1\x1E02\x1E9D\x1EA2\x1EFB\x1F02\x1F17\x1F1A");
		sb.Append("\x1F1F\x1F22\x1F47\x1F4A\x1F4F\x1F52\x1F59\x1F5B\x1F5B\x1F5D");
		sb.Append("\x1F5D\x1F5F\x1F5F\x1F61\x1F7F\x1F82\x1FB6\x1FB8\x1FBE\x1FC0");
		sb.Append("\x1FC0\x1FC4\x1FC6\x1FC8\x1FCE\x1FD2\x1FD5\x1FD8\x1FDD\x1FE2");
		sb.Append("\x1FEE\x1FF4\x1FF6\x1FF8\x1FFE\x2073\x2073\x2081\x2081\x2092");
		sb.Append("\x2096\x2104\x2104\x2109\x2109\x210C\x2115\x2117\x2117\x211A");
		sb.Append("\x211F\x2126\x2126\x2128\x2128\x212A\x212A\x212C\x2133\x2135");
		sb.Append("\x213B\x213E\x2141\x2147\x214B\x2162\x2185\x2C02\x2C30\x2C32");
		sb.Append("\x2C60\x2C82\x2CE6\x2D02\x2D27\x2D32\x2D67\x2D71\x2D71\x2D82");
		sb.Append("\x2D98\x2DA2\x2DA8\x2DAA\x2DB0\x2DB2\x2DB8\x2DBA\x2DC0\x2DC2");
		sb.Append("\x2DC8\x2DCA\x2DD0\x2DD2\x2DD8\x2DDA\x2DE0\x3007\x3009\x3023");
		sb.Append("\x302B\x3033\x3037\x303A\x303E\x3043\x3098\x309D\x30A1\x30A3");
		sb.Append("\x30FC\x30FE\x3101\x3107\x312E\x3133\x3190\x31A2\x31B9\x31F2");
		sb.Append("\x3201\x3402\x4DB7\x4E02\x9FBD\xA002\xA48E\xA802\xA803\xA805");
		sb.Append("\xA807\xA809\xA80C\xA80E\xA824\xAC02\xD7A5\xF902\xFA2F\xFA32");
		sb.Append("\xFA6C\xFA72\xFADB\xFB02\xFB08\xFB15\xFB19\xFB1F\xFB1F\xFB21");
		sb.Append("\xFB2A\xFB2C\xFB38\xFB3A\xFB3E\xFB40\xFB40\xFB42\xFB43\xFB45");
		sb.Append("\xFB46\xFB48\xFBB3\xFBD5\xFD3F\xFD52\xFD91\xFD94\xFDC9\xFDF2");
		sb.Append("\xFDFD\xFE72\xFE76\xFE78\xFEFE\xFF23\xFF3C\xFF43\xFF5C\xFF68");
		sb.Append("\xFFC0\xFFC4\xFFC9\xFFCC\xFFD1\xFFD4\xFFD9\xFFDC\xFFDE\x96\x2");
		sb.Append("\x32;\x302\x371\x485\x488\x593\x5BB\x5BD\x5BF\x5C1\x5C1\x5C3");
		sb.Append("\x5C4\x5C6\x5C7\x5C9\x5C9\x612\x617\x64D\x660\x662\x66B\x672");
		sb.Append("\x672\x6D8\x6DE\x6E1\x6E6\x6E9\x6EA\x6EC\x6EF\x6F2\x6FB\x713");
		sb.Append("\x713\x732\x74C\x7A8\x7B2\x903\x905\x93E\x93E\x940\x94F\x953");
		sb.Append("\x956\x964\x965\x968\x971\x983\x985\x9BE\x9BE\x9C0\x9C6\x9C9");
		sb.Append("\x9CA\x9CD\x9CF\x9D9\x9D9\x9E4\x9E5\x9E8\x9F1\xA03\xA05\xA3E");
		sb.Append("\xA3E\xA40\xA44\xA49\xA4A\xA4D\xA4F\xA68\xA73\xA83\xA85\xABE");
		sb.Append("\xABE\xAC0\xAC7\xAC9\xACB\xACD\xACF\xAE4\xAE5\xAE8\xAF1\xB03");
		sb.Append("\xB05\xB3E\xB3E\xB40\xB45\xB49\xB4A\xB4D\xB4F\xB58\xB59\xB68");
		sb.Append("\xB71\xB84\xB84\xBC0\xBC4\xBC8\xBCA\xBCC\xBCF\xBD9\xBD9\xBE8");
		sb.Append("\xBF1\xC03\xC05\xC40\xC46\xC48\xC4A\xC4C\xC4F\xC57\xC58\xC68");
		sb.Append("\xC71\xC84\xC85\xCBE\xCBE\xCC0\xCC6\xCC8\xCCA\xCCC\xCCF\xCD7");
		sb.Append("\xCD8\xCE8\xCF1\xD04\xD05\xD40\xD45\xD48\xD4A\xD4C\xD4F\xD59");
		sb.Append("\xD59\xD68\xD71\xD84\xD85\xDCC\xDCC\xDD1\xDD6\xDD8\xDD8\xDDA");
		sb.Append("\xDE1\xDF4\xDF5\xE33\xE33\xE36\xE3C\xE49\xE50\xE52\xE5B\xEB3");
		sb.Append("\xEB3\xEB6\xEBB\xEBD\xEBE\xECA\xECF\xED2\xEDB\xF1A\xF1B\xF22");
		sb.Append("\xF2B\xF37\xF37\xF39\xF39\xF3B\xF3B\xF40\xF41\xF73\xF86\xF88");
		sb.Append("\xF89\xF92\xF99\xF9B\xFBE\xFC8\xFC8\x102E\x1034\x1038\x103B");
		sb.Append("\x1042\x104B\x1058\x105B\x1361\x1361\x136B\x1373\x1714\x1716");
		sb.Append("\x1734\x1736\x1754\x1755\x1774\x1775\x17B8\x17D5\x17DF\x17DF");
		sb.Append("\x17E2\x17EB\x180D\x180F\x1812\x181B\x18AB\x18AB\x1922\x192D");
		sb.Append("\x1932\x193D\x1948\x1951\x19B2\x19C2\x19CA\x19CB\x19D2\x19DB");
		sb.Append("\x1A19\x1A1D\x1DC2\x1DC5\x2041\x2042\x2056\x2056\x20D2\x20DE");
		sb.Append("\x20E3\x20E3\x20E7\x20ED\x302C\x3031\x309B\x309C\xA804\xA804");
		sb.Append("\xA808\xA808\xA80D\xA80D\xA825\xA829\xFB20\xFB20\xFE02\xFE11");
		sb.Append("\xFE22\xFE25\xFE35\xFE36\xFE4F\xFE51\xFF12\xFF1B\xFF41\xFF41");
		sb.Append("\x19D\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2");
		sb.Append("\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2");
		sb.Append("\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2");
		sb.Append("\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2");
		sb.Append("\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3");
		sb.Append("\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2");
		sb.Append("+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2");
		sb.Append("\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2");
		sb.Append("\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2");
		sb.Append("\x2\x2\x2\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2");
		sb.Append("\x2\x2G\x3\x2\x2\x2\x2I\x3\x2\x2\x2\x2K\x3\x2\x2\x2\x2M\x3\x2");
		sb.Append("\x2\x2\x2O\x3\x2\x2\x2\x2Q\x3\x2\x2\x2\x2S\x3\x2\x2\x2\x2U\x3");
		sb.Append("\x2\x2\x2\x2W\x3\x2\x2\x2\x2Y\x3\x2\x2\x2\x2[\x3\x2\x2\x2\x2");
		sb.Append("]\x3\x2\x2\x2\x2g\x3\x2\x2\x2\x3m\x3\x2\x2\x2\x5p\x3\x2\x2\x2");
		sb.Append("\as\x3\x2\x2\x2\tv\x3\x2\x2\x2\v{\x3\x2\x2\x2\r}\x3\x2\x2\x2");
		sb.Append("\xF\x7F\x3\x2\x2\x2\x11\x82\x3\x2\x2\x2\x13\x89\x3\x2\x2\x2");
		sb.Append("\x15\x8D\x3\x2\x2\x2\x17\x97\x3\x2\x2\x2\x19\x9D\x3\x2\x2\x2");
		sb.Append("\x1B\xB6\x3\x2\x2\x2\x1D\xB8\x3\x2\x2\x2\x1F\xBF\x3\x2\x2\x2");
		sb.Append("!\xC9\x3\x2\x2\x2#\xDA\x3\x2\x2\x2%\xE1\x3\x2\x2\x2\'\xE8\x3");
		sb.Append("\x2\x2\x2)\xF1\x3\x2\x2\x2+\xF6\x3\x2\x2\x2-\xFD\x3\x2\x2\x2");
		sb.Append("/\x102\x3\x2\x2\x2\x31\x106\x3\x2\x2\x2\x33\x10A\x3\x2\x2\x2");
		sb.Append("\x35\x10D\x3\x2\x2\x2\x37\x113\x3\x2\x2\x2\x39\x11C\x3\x2\x2");
		sb.Append("\x2;\x126\x3\x2\x2\x2=\x12A\x3\x2\x2\x2?\x12C\x3\x2\x2\x2\x41");
		sb.Append("\x12E\x3\x2\x2\x2\x43\x130\x3\x2\x2\x2\x45\x133\x3\x2\x2\x2");
		sb.Append("G\x136\x3\x2\x2\x2I\x139\x3\x2\x2\x2K\x13C\x3\x2\x2\x2M\x13E");
		sb.Append("\x3\x2\x2\x2O\x140\x3\x2\x2\x2Q\x145\x3\x2\x2\x2S\x147\x3\x2");
		sb.Append("\x2\x2U\x14A\x3\x2\x2\x2W\x14C\x3\x2\x2\x2Y\x158\x3\x2\x2\x2");
		sb.Append("[\x15F\x3\x2\x2\x2]\x163\x3\x2\x2\x2_\x16B\x3\x2\x2\x2\x61\x16F");
		sb.Append("\x3\x2\x2\x2\x63\x171\x3\x2\x2\x2\x65\x174\x3\x2\x2\x2g\x186");
		sb.Append("\x3\x2\x2\x2i\x18D\x3\x2\x2\x2k\x191\x3\x2\x2\x2mn\a@\x2\x2");
		sb.Append("no\a?\x2\x2o\x4\x3\x2\x2\x2pq\a?\x2\x2qr\a?\x2\x2r\x6\x3\x2");
		sb.Append("\x2\x2st\a#\x2\x2tu\a?\x2\x2u\b\x3\x2\x2\x2vw\a>\x2\x2wx\a?");
		sb.Append("\x2\x2x\n\x3\x2\x2\x2y|\a-\x2\x2z|\x5\xF\b\x2{y\x3\x2\x2\x2");
		sb.Append("{z\x3\x2\x2\x2|\f\x3\x2\x2\x2}~\t\x2\x2\x2~\xE\x3\x2\x2\x2\x7F");
		sb.Append("\x80\a/\x2\x2\x80\x10\x3\x2\x2\x2\x81\x83\x5[.\x2\x82\x81\x3");
		sb.Append("\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2\x84\x85\x5");
		sb.Append("Q)\x2\x85\x86\x5[.\x2\x86\x12\x3\x2\x2\x2\x87\x8A\x5[.\x2\x88");
		sb.Append("\x8A\x5\x11\t\x2\x89\x87\x3\x2\x2\x2\x89\x88\x3\x2\x2\x2\x8A");
		sb.Append("\x8B\x3\x2\x2\x2\x8B\x8C\x5\x65\x33\x2\x8C\x14\x3\x2\x2\x2\x8D");
		sb.Append("\x92\a$\x2\x2\x8E\x91\x5\x63\x32\x2\x8F\x91\n\x3\x2\x2\x90\x8E");
		sb.Append("\x3\x2\x2\x2\x90\x8F\x3\x2\x2\x2\x91\x94\x3\x2\x2\x2\x92\x90");
		sb.Append("\x3\x2\x2\x2\x92\x93\x3\x2\x2\x2\x93\x95\x3\x2\x2\x2\x94\x92");
		sb.Append("\x3\x2\x2\x2\x95\x96\a$\x2\x2\x96\x16\x3\x2\x2\x2\x97\x98\a");
		sb.Append("u\x2\x2\x98\x99\a\x63\x2\x2\x99\x9A\ap\x2\x2\x9A\x9B\a\x66\x2");
		sb.Append("\x2\x9B\x9C\av\x2\x2\x9C\x18\x3\x2\x2\x2\x9D\x9E\ah\x2\x2\x9E");
		sb.Append("\x9F\a\x63\x2\x2\x9F\xA0\an\x2\x2\xA0\xA1\au\x2\x2\xA1\xA2\a");
		sb.Append("m\x2\x2\xA2\x1A\x3\x2\x2\x2\xA3\xA4\aq\x2\x2\xA4\xA5\ah\x2\x2");
		sb.Append("\xA5\xA6\ah\x2\x2\xA6\xA7\ag\x2\x2\xA7\xA8\ap\x2\x2\xA8\xA9");
		sb.Append("\av\x2\x2\xA9\xAA\an\x2\x2\xAA\xAB\ak\x2\x2\xAB\xB7\ai\x2\x2");
		sb.Append("\xAC\xAD\aq\x2\x2\xAD\xAE\ah\x2\x2\xAE\xAF\ah\x2\x2\xAF\xB0");
		sb.Append("\ag\x2\x2\xB0\xB1\ap\x2\x2\xB1\xB2\av\x2\x2\xB2\xB3\an\x2\x2");
		sb.Append("\xB3\xB4\ak\x2\x2\xB4\xB5\ai\x2\x2\xB5\xB7\av\x2\x2\xB6\xA3");
		sb.Append("\x3\x2\x2\x2\xB6\xAC\x3\x2\x2\x2\xB7\x1C\x3\x2\x2\x2\xB8\xB9");
		sb.Append("\ar\x2\x2\xB9\xBA\at\x2\x2\xBA\xBB\ak\x2\x2\xBB\xBC\ax\x2\x2");
		sb.Append("\xBC\xBD\a\x63\x2\x2\xBD\xBE\av\x2\x2\xBE\x1E\x3\x2\x2\x2\xBF");
		sb.Append("\xC0\a\x64\x2\x2\xC0\xC1\ag\x2\x2\xC1\xC2\au\x2\x2\xC2\xC3\a");
		sb.Append("m\x2\x2\xC3\xC4\a{\x2\x2\xC4\xC5\av\x2\x2\xC5\xC6\av\x2\x2\xC6");
		sb.Append("\xC7\ag\x2\x2\xC7\xC8\av\x2\x2\xC8 \x3\x2\x2\x2\xC9\xCA\a\x64");
		sb.Append("\x2\x2\xCA\xCB\ag\x2\x2\xCB\xCC\au\x2\x2\xCC\xCD\am\x2\x2\xCD");
		sb.Append("\xCE\a{\x2\x2\xCE\xCF\av\x2\x2\xCF\xD0\av\x2\x2\xD0\xD1\ag\x2");
		sb.Append("\x2\xD1\xD2\av\x2\x2\xD2\xD3\a\"\x2\x2\xD3\xD4\ak\x2\x2\xD4");
		sb.Append("\xD5\ap\x2\x2\xD5\xD6\av\x2\x2\xD6\xD7\ag\x2\x2\xD7\xD8\at\x2");
		sb.Append("\x2\xD8\xD9\ap\x2\x2\xD9\"\x3\x2\x2\x2\xDA\xDB\ak\x2\x2\xDB");
		sb.Append("\xDC\ap\x2\x2\xDC\xDD\av\x2\x2\xDD\xDE\ag\x2\x2\xDE\xDF\at\x2");
		sb.Append("\x2\xDF\xE0\ap\x2\x2\xE0$\x3\x2\x2\x2\xE1\xE2\am\x2\x2\xE2\xE3");
		sb.Append("\an\x2\x2\xE3\xE4\a\x63\x2\x2\xE4\xE5\au\x2\x2\xE5\xE6\au\x2");
		sb.Append("\x2\xE6\xE7\ag\x2\x2\xE7&\x3\x2\x2\x2\xE8\xE9\at\x2\x2\xE9\xEA");
		sb.Append("\ag\x2\x2\xEA\xEB\av\x2\x2\xEB\xEC\aw\x2\x2\xEC\xED\at\x2\x2");
		sb.Append("\xED\xEE\ap\x2\x2\xEE\xEF\ag\x2\x2\xEF\xF0\at\x2\x2\xF0(\x3");
		sb.Append("\x2\x2\x2\xF1\xF2\aj\x2\x2\xF2\xF3\ax\x2\x2\xF3\xF4\ak\x2\x2");
		sb.Append("\xF4\xF5\au\x2\x2\xF5*\x3\x2\x2\x2\xF6\xF7\ag\x2\x2\xF7\xF8");
		sb.Append("\an\x2\x2\xF8\xF9\an\x2\x2\xF9\xFA\ag\x2\x2\xFA\xFB\at\x2\x2");
		sb.Append("\xFB\xFC\au\x2\x2\xFC,\x3\x2\x2\x2\xFD\xFE\ao\x2\x2\xFE\xFF");
		sb.Append("\ag\x2\x2\xFF\x100\ap\x2\x2\x100\x101\au\x2\x2\x101.\x3\x2\x2");
		sb.Append("\x2\x102\x103\ah\x2\x2\x103\x104\aq\x2\x2\x104\x105\at\x2\x2");
		sb.Append("\x105\x30\x3\x2\x2\x2\x106\x107\av\x2\x2\x107\x108\ak\x2\x2");
		sb.Append("\x108\x109\an\x2\x2\x109\x32\x3\x2\x2\x2\x10A\x10B\aq\x2\x2");
		sb.Append("\x10B\x10C\ai\x2\x2\x10C\x34\x3\x2\x2\x2\x10D\x10E\ag\x2\x2");
		sb.Append("\x10E\x10F\an\x2\x2\x10F\x110\an\x2\x2\x110\x111\ag\x2\x2\x111");
		sb.Append("\x112\at\x2\x2\x112\x36\x3\x2\x2\x2\x113\x114\ak\x2\x2\x114");
		sb.Append("\x115\ao\x2\x2\x115\x116\ar\x2\x2\x116\x117\aq\x2\x2\x117\x118");
		sb.Append("\at\x2\x2\x118\x119\av\x2\x2\x119\x11A\ag\x2\x2\x11A\x11B\a");
		sb.Append("t\x2\x2\x11B\x38\x3\x2\x2\x2\x11C\x11D\at\x2\x2\x11D\x11E\a");
		sb.Append("g\x2\x2\x11E\x11F\ah\x2\x2\x11F\x120\ag\x2\x2\x120\x121\at\x2");
		sb.Append("\x2\x121\x122\ag\x2\x2\x122\x123\ap\x2\x2\x123\x124\a\x65\x2");
		sb.Append("\x2\x124\x125\ag\x2\x2\x125:\x3\x2\x2\x2\x126\x127\ah\x2\x2");
		sb.Append("\x127\x128\at\x2\x2\x128\x129\a\x63\x2\x2\x129<\x3\x2\x2\x2");
		sb.Append("\x12A\x12B\a.\x2\x2\x12B>\x3\x2\x2\x2\x12C\x12D\a?\x2\x2\x12D");
		sb.Append("@\x3\x2\x2\x2\x12E\x12F\a=\x2\x2\x12F\x42\x3\x2\x2\x2\x130\x131");
		sb.Append("\a*\x2\x2\x131\x132\b\"\x2\x2\x132\x44\x3\x2\x2\x2\x133\x134");
		sb.Append("\a+\x2\x2\x134\x135\b#\x3\x2\x135\x46\x3\x2\x2\x2\x136\x137");
		sb.Append("\a]\x2\x2\x137\x138\b$\x4\x2\x138H\x3\x2\x2\x2\x139\x13A\a_");
		sb.Append("\x2\x2\x13A\x13B\b%\x5\x2\x13BJ\x3\x2\x2\x2\x13C\x13D\a>\x2");
		sb.Append("\x2\x13DL\x3\x2\x2\x2\x13E\x13F\a@\x2\x2\x13FN\x3\x2\x2\x2\x140");
		sb.Append("\x141\ak\x2\x2\x141\x142\am\x2\x2\x142\x143\am\x2\x2\x143\x144");
		sb.Append("\ag\x2\x2\x144P\x3\x2\x2\x2\x145\x146\a\x30\x2\x2\x146R\x3\x2");
		sb.Append("\x2\x2\x147\x148\a,\x2\x2\x148\x149\a,\x2\x2\x149T\x3\x2\x2");
		sb.Append("\x2\x14A\x14B\a<\x2\x2\x14BV\x3\x2\x2\x2\x14C\x14D\a\x31\x2");
		sb.Append("\x2\x14D\x14E\a\x31\x2\x2\x14E\x152\x3\x2\x2\x2\x14F\x151\n");
		sb.Append("\x4\x2\x2\x150\x14F\x3\x2\x2\x2\x151\x154\x3\x2\x2\x2\x152\x150");
		sb.Append("\x3\x2\x2\x2\x152\x153\x3\x2\x2\x2\x153\x155\x3\x2\x2\x2\x154");
		sb.Append("\x152\x3\x2\x2\x2\x155\x156\b,\x6\x2\x156X\x3\x2\x2\x2\x157");
		sb.Append("\x159\x5_\x30\x2\x158\x157\x3\x2\x2\x2\x159\x15A\x3\x2\x2\x2");
		sb.Append("\x15A\x158\x3\x2\x2\x2\x15A\x15B\x3\x2\x2\x2\x15B\x15C\x3\x2");
		sb.Append("\x2\x2\x15C\x15D\b-\x6\x2\x15DZ\x3\x2\x2\x2\x15E\x160\x5\x61");
		sb.Append("\x31\x2\x15F\x15E\x3\x2\x2\x2\x160\x161\x3\x2\x2\x2\x161\x15F");
		sb.Append("\x3\x2\x2\x2\x161\x162\x3\x2\x2\x2\x162\\\x3\x2\x2\x2\x163\x167");
		sb.Append("\x5i\x35\x2\x164\x166\x5k\x36\x2\x165\x164\x3\x2\x2\x2\x166");
		sb.Append("\x169\x3\x2\x2\x2\x167\x165\x3\x2\x2\x2\x167\x168\x3\x2\x2\x2");
		sb.Append("\x168^\x3\x2\x2\x2\x169\x167\x3\x2\x2\x2\x16A\x16C\t\x5\x2\x2");
		sb.Append("\x16B\x16A\x3\x2\x2\x2\x16C\x16D\x3\x2\x2\x2\x16D\x16B\x3\x2");
		sb.Append("\x2\x2\x16D\x16E\x3\x2\x2\x2\x16E`\x3\x2\x2\x2\x16F\x170\x4");
		sb.Append("\x32;\x2\x170\x62\x3\x2\x2\x2\x171\x172\a^\x2\x2\x172\x173\v");
		sb.Append("\x2\x2\x2\x173\x64\x3\x2\x2\x2\x174\x176\t\x6\x2\x2\x175\x177");
		sb.Append("\x5\v\x6\x2\x176\x175\x3\x2\x2\x2\x176\x177\x3\x2\x2\x2\x177");
		sb.Append("\x178\x3\x2\x2\x2\x178\x179\x5[.\x2\x179\x66\x3\x2\x2\x2\x17A");
		sb.Append("\x17B\x6\x34\x2\x2\x17B\x187\x5_\x30\x2\x17C\x17E\a\xF\x2\x2");
		sb.Append("\x17D\x17C\x3\x2\x2\x2\x17D\x17E\x3\x2\x2\x2\x17E\x17F\x3\x2");
		sb.Append("\x2\x2\x17F\x182\a\f\x2\x2\x180\x182\a\xF\x2\x2\x181\x17D\x3");
		sb.Append("\x2\x2\x2\x181\x180\x3\x2\x2\x2\x182\x184\x3\x2\x2\x2\x183\x185");
		sb.Append("\x5_\x30\x2\x184\x183\x3\x2\x2\x2\x184\x185\x3\x2\x2\x2\x185");
		sb.Append("\x187\x3\x2\x2\x2\x186\x17A\x3\x2\x2\x2\x186\x181\x3\x2\x2\x2");
		sb.Append("\x187\x188\x3\x2\x2\x2\x188\x189\b\x34\a\x2\x189\x18A\x3\x2");
		sb.Append("\x2\x2\x18A\x18B\b\x34\x6\x2\x18Bh\x3\x2\x2\x2\x18C\x18E\t\a");
		sb.Append("\x2\x2\x18D\x18C\x3\x2\x2\x2\x18Ej\x3\x2\x2\x2\x18F\x192\x5");
		sb.Append("i\x35\x2\x190\x192\t\b\x2\x2\x191\x18F\x3\x2\x2\x2\x191\x190");
		sb.Append("\x3\x2\x2\x2\x192l\x3\x2\x2\x2\x15\x2{\x82\x89\x90\x92\xB6\x152");
		sb.Append("\x15A\x161\x167\x16D\x176\x17D\x181\x184\x186\x18D\x191\b\x3");
		sb.Append("\"\x2\x3#\x3\x3$\x4\x3%\x5\x2\x3\x2\x3\x34\x6");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
} // namespace libcompiler.Parser
