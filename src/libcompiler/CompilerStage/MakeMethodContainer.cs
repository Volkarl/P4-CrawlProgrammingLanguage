using System.Collections.Generic;
using System.ComponentModel;
using Antlr4.Runtime.Misc;
using libcompiler.SyntaxTree;
using libcompiler.TypeSystem;

namespace libcompiler.CompilerStage
{
    public class MakeMethodContainer : SyntaxRewriter
    {
        protected override CrawlSyntaxNode VisitTranslationUnit(TranslationUnitNode node)
        {
            List<CrawlSyntaxNode> classes = new List<CrawlSyntaxNode>();
            List<CrawlSyntaxNode> methods = new List<CrawlSyntaxNode>();
            foreach (CrawlSyntaxNode methodOrClass in node.Code)
            {
                if(methodOrClass is ClassTypeDeclerationNode)
                    classes.Add(methodOrClass);
                else if(methodOrClass is CallableDeclarationNode)
                    methods.Add(methodOrClass);
                else throw new InvalidEnumArgumentException("Should not have anything but classes or methods remaining");
            }

            ClassTypeDeclerationNode theExtraClass = CrawlSyntaxNode.ClassTypeDecleration(Interval.Invalid,
                ProtectionLevel.Public, new CrawlConstructedType("__CRAWL_AUTOGENERATED", node.Namespace.Module),
                CrawlSyntaxNode.Identifier(Interval.Invalid, "__CRAWL_AUTOGENERATED"), new List<IdentifierNode>(),
                new GenericParameterNode[0],
                CrawlSyntaxNode.Block(Interval.Invalid, methods)
            );

            classes.Add(theExtraClass);

            //TODO: BREAKS METHOD CALLS IN GENERATED
            //TODO: MARK PARTIAL AND USING STATIC.
            return node.WithCode(CrawlSyntaxNode.Block(node.Code.Interval, classes));
        }
    }
}