<?xml version="1.0" encoding="utf-8" ?>
<syntaxnodes>
    <options>
        <basename>CrawlSyntax</basename>
        <namespace>libcompiler.SyntaxTree</namespace>
        <parent>parent</parent>
        <createred>CreateRed</createred>
        <getred>GetRed</getred>
        <index>index</index>
        <indexinparent>indexInParent</indexinparent>
        <getchildat>GetChildAt</getchildat>
        <invalidchildreplace>ArgumentOutOfRangeException</invalidchildreplace>
        <with_replaced_child>WithReplacedChild</with_replaced_child>
        <new_child>newChild</new_child>
        <self>self</self>
        <visit>Visit</visit> 
        <node>Node</node>
        <combine>Combine</combine>
        <update>Update</update>
    </options>
    <nodes>
        <node>
            <name>CrawlSyntax</name>
            <properties>
                <property>
                    <name>Type</name> 
                    <type>NodeType</type>
                </property>
                <property>
                    <name>Interval</name>
                    <type>Interval</type>
                </property>
            </properties>
        </node>
        <node>
            <name>Assignment</name>
            <baseclass>CrawlSyntax</baseclass>
            <children>
                <child>
                    <name>Target</name>
                    <type>Expression</type>
                </child>
                <child>
                    <name>Value</name>
                    <type>Expression</type>
                </child>
            </children>
        </node>
        <node>
            <name>Argument</name>
            <baseclass>CrawlSyntax</baseclass>
            <properties>
                <property>
                    <name>Refence</name>
                    <type>bool</type>
                </property>
            </properties>
            <children>
                <child>
                    <name>Value</name>
                    <type>Expression</type>
                </child>
            </children>
        </node>
        <node>
            <name>BinaryExpression</name>
            <baseclass>Expression</baseclass>
            <children>
                <child>
                    <name>LeftHandSide</name>
                    <type>Expression</type>
                </child>
                <child>
                    <name>RightHandSide</name>
                    <type>Expression</type>
                </child>
            </children>
        </node>
        <node>
            <name>MemberAccess</name>
            <baseclass>Expression</baseclass>
            <children>
                <child>
                    <name>Target</name>
                    <type>Expression</type>
                </child>
                <child>
                    <name>Member</name>
                    <type>Identifier</type>
                </child>
            </children>
        </node>
        <node>
            <name>GenericsUnpack</name>
            <baseclass>Expression</baseclass>
            <children>
                <child>
                    <name>Target</name>
                    <type>Expression</type>
                </child>
                <child>
                    <name>Arguments</name>
                    <type>List'Type</type>
                </child>
            </children>
        </node>
        <node>
            <name>Block</name>
            <baseclass>List'CrawlSyntax</baseclass>
            <manual>true</manual>
        </node>
        <node>
            <name>Call</name>
            <baseclass>Expression</baseclass>
            <children>
                <child>
                    <name>Target</name>
                    <type>Expression</type>
                </child>
                <child>
                    <name>Arguments</name>
                    <type>List'Argument</type>
                </child>
            </children>
            <properties>
                <property>
                    <name>CalleeType</name>
                    <type>CrawlMethodType</type>
                </property>
            </properties>
        </node>
        <node>
            <name>CastExpression</name>
            <baseclass>Expression</baseclass>
            <children>
                <child>
                    <name>TypeToConvertTo</name>
                    <type>Type</type>
                </child>
                <child>
                    <name>Target</name>
                    <type>Expression</type>
                </child>
            </children>
        </node>
        <node>
            <name>Namespace</name>
            <baseclass>Import</baseclass>
        </node>
        <node>
            <name>Literal</name>
            <baseclass>Expression</baseclass>
            <abstract>true</abstract>
        </node>
        <node>
            <name>RealLiteral</name>
            <baseclass>Literal</baseclass>
            <properties>
                <property>
                    <type>double</type>
                    <name>Value</name>
                </property>
            </properties>
        </node>
        <node>
            <name>StringLiteral</name>
            <baseclass>Literal</baseclass>
            <properties>
                <property>
                    <type>string</type>
                    <name>Value</name>
                </property>
            </properties>
        </node>
        <node>
            <name>IntegerLiteral</name>
            <baseclass>Literal</baseclass>
            <properties>
                <property>
                    <type>int</type>
                    <name>Value</name>
                </property>
            </properties>
        </node>
        <node>
            <name>BooleanLiteral</name>
            <baseclass>Literal</baseclass>
            <properties>
                <property>
                    <type>bool</type>
                    <name>Value</name>
                </property>
            </properties>
        </node>
        <node>
            <name>NullLiteral</name>
            <baseclass>Literal</baseclass>
        </node>
        <node>
            <name>Index</name>
            <baseclass>Expression</baseclass>
            <children>
                <child>
                    <name>Target</name>
                    <type>Expression</type>
                </child>
                <child>
                    <name>Arguments</name>
                    <type>List'Argument</type>
                </child>
            </children>
        </node>
        <node>
            <name>CallableDeclaration</name>
            <baseclass>Decleration</baseclass>
            <children>
                <child>
                    <name>MethodSignature</name>
                    <type>Type</type>
                </child>
                <child>
                    <name>Parameters</name>
                    <type>List'Parameter</type>
                </child>
                <child>
                    <name>Body</name>
                    <type>Block</type>
                </child>
            </children>
            <properties>
              <property>
                <name>Scope</name>
                <type>IScope</type>
                <nulldefault>true</nulldefault> 
              </property>
              <property>
                  <name>UniqueItemTracker</name>
                  <type>Reference'UniqueItem</type>
              </property>
            </properties>
        </node>
        <node>
            <name>ClassTypeDecleration</name>
            <baseclass>Decleration</baseclass>
            <children>
                <child>
                    <name>Identifier</name>
                    <type>Identifier</type>
                </child>
                <child>
                    <name>BaseTypes</name>
                    <type>List'Identifier</type>
                </child>
                <child>
                    <name>GenericParameters</name>
                    <type>List'GenericParameter</type>
                </child>
                <child>
                    <name>Body</name>
                    <type>Block</type>
                </child>
            </children>
            <properties>
                <property>
                    <name>ClassType</name>
                    <type>CrawlConstructedType</type>
                </property>
            </properties>
        </node>
        <node>
            <name>Constructor</name>
            <baseclass>CallableDeclaration</baseclass>
        </node>
        <node>
            <name>Decleration</name>
            <baseclass>CrawlSyntax</baseclass>
            <abstract>true</abstract>
            <properties>
                <property>
                    <name>ProtectionLevel</name>
                    <type>ProtectionLevel</type>
                </property>
            </properties>
        </node>
        <node>
            <name>Expression</name>
            <baseclass>CrawlSyntax</baseclass>
            <abstract>true</abstract>
            <properties>
                <property>
                    <name>ExpressionType</name>
                    <type>ExpressionType</type>
                </property>
                <property>
                    <name>ResultType</name>
                    <type>CrawlType</type>
                </property>
            </properties>
        </node>
        <node>
            <name>Flow</name>
            <baseclass>CrawlSyntax</baseclass>
            <abstract>true</abstract>
        </node>
        <node>
            <name>ForLoop</name>
            <baseclass>Flow</baseclass>
            <children>
                <child>
                    <name>Loopvariable</name>
                    <type>Type</type>
                </child>
                <child>
                    <name>LoopVariable</name>
                    <type>Identifier</type>
                </child>
                <child>
                    <name>Iterator</name>
                    <type>Expression</type>
                </child>
                <child>
                    <name>Body</name>
                    <type>Block</type>
                </child>
            </children>
          <properties>
            <property>
              <name>Scope</name>
              <type>IScope</type>
            </property>
          </properties>
          <!-- Scope-->
        </node>
        <node>
            <name>GenericParameter</name>
            <baseclass>Identifier</baseclass>
            <properties>
                <property>
                    <name>Limitation</name>
                    <type>string</type>
                </property>
            </properties>
        </node>
        <!-- GenericsUnpack -->
        <node>
            <name>Identifier</name>
            <baseclass>CrawlSyntax</baseclass>
            <properties>
                <property>
                    <name>Value</name>
                    <type>string</type>
                </property>
            </properties>
        </node>
        <node>
            <name>Import</name>
            <baseclass>CrawlSyntax</baseclass>
            <properties>
                <property>
                    <type>string</type>
                    <name>Module</name>
                </property>
            </properties>
        </node>
        <node> 
            <name>List'CrawlSyntax</name>
            <baseclass>CrawlSyntax</baseclass>
            <manual>true</manual>
            <properties>
                <property>
                    <type>IEnumerable'CrawlSyntaxNodes</type>
                    <name>Children</name>
                </property>
            </properties>
        </node>
        <node>
            <name>MethodDecleration</name>
            <baseclass>CallableDeclaration</baseclass>
            <children>
                <child>
                    <name>Identifier</name>
                    <type>Identifier</type>
                </child>
                <child>
                    <name>GenericParameters</name>
                    <type>List'GenericParameter</type>
                </child>
            </children>
        </node>
        <node>
            <name>MultiChildExpression</name>
            <baseclass>Expression</baseclass>
            <children>
                <child>
                    <name>Arguments</name>
                    <type>List'Expression</type>
                </child>
            </children>
        </node>
        <node>
            <name>Parameter</name>
            <baseclass>CrawlSyntax</baseclass>
            <properties>
                <property>
                    <name>Reference</name>
                    <type>bool</type>
                </property>
            </properties>
            <children>
                <child>
                    <name>ParameterType</name>
                    <type>Type</type>
                </child>
                <child>
                    <name>Identifier</name>
                    <type>Identifier</type>
                </child>
            </children>
        </node>
        <node>
            <name>ReturnStatement</name>
            <baseclass>CrawlSyntax</baseclass>
            <children>
                <child>
                    <name>Value</name>
                    <type>Expression</type>
                    <nulldefault>true</nulldefault>
                </child>
            </children>
        </node>
        <node>
            <name>While</name>
            <baseclass>Flow</baseclass>
            <children>
                <child>
                    <name>Condition</name>
                    <type>Expression</type></child>
                <child>
                    <name>Statementes</name>
                    <type>Block</type>
                </child>
            </children>
        </node>
        <node>
            <name>If</name>
            <baseclass>Flow</baseclass>
            <children>
                <child>
                    <name>Condition</name>
                    <type>Expression</type></child>
                <child>
                    <name>TrueBlock</name>
                    <type>Block</type>
                </child>
            </children>
        </node>
        <node>
            <name>IfElse</name>
            <baseclass>If</baseclass>
            <children>
                <child>
                    <name>FalseBlock</name>
                    <type>Block</type>
                </child>
            </children>
        </node>
        <node>
            <name>TranslationUnit</name>
            <baseclass>CrawlSyntax</baseclass>
            <children>
                <child>
                    <name>Imports</name>
                    <type>List'Import</type>
                </child>
                <child>
                    <name>Namespace</name>
                    <type>Namespace</type>
                </child>
                <child>
                    <name>Code</name>
                    <type>Block</type>
                </child>
            </children>
            <properties>
                <property>
                    <name>ImportedNamespaces</name>
                    <type>Namespace</type>
                    <nulldefault>true</nulldefault>
                </property>
            </properties>
          <!-- Imports scope-->
        </node>
        <node>
            <name>Type</name>
            <baseclass>CrawlSyntax</baseclass>
            <properties>
                <property>
                    <name>TypeName</name>
                    <type>string</type>
                </property>
                <!--<property>
                    <name>IsReference</name>
                    <type>bool</type>
                </property> -->
                <property>
                    <name>ArrayDimensions</name>
                    <type>int</type>
                </property>
              <property>
                <name>ActualType</name>
                <type>CrawlType</type>
              </property>
            </properties>
        </node>
        <node>
            <name>ArrayConstructor</name>
            <baseclass>Expression</baseclass>
            <children>
                <child>
                    <name>Target</name>
                    <type>Type</type>
                </child>
            </children>
        </node>
        <node>
            <name>UnaryExpression</name>
            <baseclass>Expression</baseclass>
            <children>
                <child>
                    <name>Target</name>
                    <type>Expression</type>
                </child>
            </children>
        </node>
        <node>
            <!--TODO: SingleVariableDecleration -> VariableDecleration and VariableDecleration -> VariableDeclerations?-->
            <name>SingleVariableDecleration</name>
            <baseclass>CrawlSyntax</baseclass>
            <children>
                <child>
                    <name>Identifier</name>
                    <type>Variable</type>
                </child>
                <child>
                    <name>DefaultValue</name>
                    <type>Expression</type>
                    <nulldefault>true</nulldefault>
                </child>
            </children>
        </node>
        <node>
            <name>VariableDecleration</name>
            <baseclass>Decleration</baseclass>
            <children>
                <child>
                    <name>DeclerationType</name>
                    <type>Type</type>
                </child>
                <child>
                    <name>Declerations</name>
                    <type>List'SingleVariableDecleration</type>
                </child>
            </children>
        </node>
        <node>
            <name>Variable</name>
            <baseclass>Expression</baseclass>
            <properties>
                <property>
                    <name>Name</name>
                    <type>string</type>
                </property>
                <property>
                    <name>UniqueItemTracker</name>
                    <type>Reference'UniqueItem</type>
                </property>
            </properties>
        </node>
    </nodes>
</syntaxnodes>